id: bundle
language: CSharp
name:
  Default: bundle
qualifiedName:
  Default: bundle
type: Assembly
modifiers: {}
items:
- id: Bundles
  commentId: N:Bundles
  language: CSharp
  name:
    CSharp: Bundles
    VB: Bundles
  nameWithType:
    CSharp: Bundles
    VB: Bundles
  qualifiedName:
    CSharp: Bundles
    VB: Bundles
  type: Namespace
  assemblies:
  - bundle
  modifiers: {}
  items:
  - id: Bundles.BundleElementAttribute
    commentId: T:Bundles.BundleElementAttribute
    language: CSharp
    name:
      CSharp: BundleElementAttribute
      VB: BundleElementAttribute
    nameWithType:
      CSharp: BundleElementAttribute
      VB: BundleElementAttribute
    qualifiedName:
      CSharp: Bundles.BundleElementAttribute
      VB: Bundles.BundleElementAttribute
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/attributes/BundleElementAttribute.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleElementAttribute
      path: ../src/attributes/BundleElementAttribute.cs
      startLine: 7
    summary: "\nDescribes the XML Element Name that will be associated with this type\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Class)]

          public class BundleElementAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Class)>

          Public Class BundleElementAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 4
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.BundleElementAttribute.#ctor(System.String)
      commentId: M:Bundles.BundleElementAttribute.#ctor(System.String)
      language: CSharp
      name:
        CSharp: BundleElementAttribute(String)
        VB: BundleElementAttribute(String)
      nameWithType:
        CSharp: BundleElementAttribute.BundleElementAttribute(String)
        VB: BundleElementAttribute.BundleElementAttribute(String)
      qualifiedName:
        CSharp: Bundles.BundleElementAttribute.BundleElementAttribute(System.String)
        VB: Bundles.BundleElementAttribute.BundleElementAttribute(System.String)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/attributes/BundleElementAttribute.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/attributes/BundleElementAttribute.cs
        startLine: 15
      summary: "\nCreate a new BundleElementAttribute, associating this type\nwith the given XML Element Name\n"
      example: []
      syntax:
        content:
          CSharp: public BundleElementAttribute(string elementName)
          VB: Public Sub New(elementName As String)
        parameters:
        - id: elementName
          type: System.String
          description: ''
      overload: Bundles.BundleElementAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleElementAttribute.ElementName
      commentId: P:Bundles.BundleElementAttribute.ElementName
      language: CSharp
      name:
        CSharp: ElementName
        VB: ElementName
      nameWithType:
        CSharp: BundleElementAttribute.ElementName
        VB: BundleElementAttribute.ElementName
      qualifiedName:
        CSharp: Bundles.BundleElementAttribute.ElementName
        VB: Bundles.BundleElementAttribute.ElementName
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/attributes/BundleElementAttribute.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: ElementName
        path: ../src/attributes/BundleElementAttribute.cs
        startLine: 24
      summary: "\nXML Element Name that this type is associated with\n"
      example: []
      syntax:
        content:
          CSharp: public string ElementName { get; }
          VB: Public ReadOnly Property ElementName As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleElementAttribute.ElementName*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Bundles.DefaultOptionAttribute
    commentId: T:Bundles.DefaultOptionAttribute
    language: CSharp
    name:
      CSharp: DefaultOptionAttribute
      VB: DefaultOptionAttribute
    nameWithType:
      CSharp: DefaultOptionAttribute
      VB: DefaultOptionAttribute
    qualifiedName:
      CSharp: Bundles.DefaultOptionAttribute
      VB: Bundles.DefaultOptionAttribute
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/attributes/DefaultOptionAttribute.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: DefaultOptionAttribute
      path: ../src/attributes/DefaultOptionAttribute.cs
      startLine: 7
    summary: "\nDeclares this type a default BundleOption and defines its default value\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Class)]

          public class DefaultOptionAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Class)>

          Public Class DefaultOptionAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 4
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)
      commentId: M:Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)
      language: CSharp
      name:
        CSharp: DefaultOptionAttribute(String, String)
        VB: DefaultOptionAttribute(String, String)
      nameWithType:
        CSharp: DefaultOptionAttribute.DefaultOptionAttribute(String, String)
        VB: DefaultOptionAttribute.DefaultOptionAttribute(String, String)
      qualifiedName:
        CSharp: Bundles.DefaultOptionAttribute.DefaultOptionAttribute(System.String, System.String)
        VB: Bundles.DefaultOptionAttribute.DefaultOptionAttribute(System.String, System.String)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/attributes/DefaultOptionAttribute.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/attributes/DefaultOptionAttribute.cs
        startLine: 15
      summary: "\nCreate a new DefaultOptionAttribute\n"
      example: []
      syntax:
        content:
          CSharp: public DefaultOptionAttribute(string optionName, string defaultValue)
          VB: Public Sub New(optionName As String, defaultValue As String)
        parameters:
        - id: optionName
          type: System.String
          description: ''
        - id: defaultValue
          type: System.String
          description: ''
      overload: Bundles.DefaultOptionAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.DefaultOptionAttribute.Name
      commentId: P:Bundles.DefaultOptionAttribute.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: DefaultOptionAttribute.Name
        VB: DefaultOptionAttribute.Name
      qualifiedName:
        CSharp: Bundles.DefaultOptionAttribute.Name
        VB: Bundles.DefaultOptionAttribute.Name
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/attributes/DefaultOptionAttribute.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Name
        path: ../src/attributes/DefaultOptionAttribute.cs
        startLine: 25
      summary: "\nName of the option\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.DefaultOptionAttribute.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.DefaultOptionAttribute.DefaultValue
      commentId: P:Bundles.DefaultOptionAttribute.DefaultValue
      language: CSharp
      name:
        CSharp: DefaultValue
        VB: DefaultValue
      nameWithType:
        CSharp: DefaultOptionAttribute.DefaultValue
        VB: DefaultOptionAttribute.DefaultValue
      qualifiedName:
        CSharp: Bundles.DefaultOptionAttribute.DefaultValue
        VB: Bundles.DefaultOptionAttribute.DefaultValue
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/attributes/DefaultOptionAttribute.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: DefaultValue
        path: ../src/attributes/DefaultOptionAttribute.cs
        startLine: 31
      summary: "\nThe option&apos;s default value\n"
      example: []
      syntax:
        content:
          CSharp: public string DefaultValue { get; }
          VB: Public ReadOnly Property DefaultValue As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.DefaultOptionAttribute.DefaultValue*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Bundles.FieldNameAttribute
    commentId: T:Bundles.FieldNameAttribute
    language: CSharp
    name:
      CSharp: FieldNameAttribute
      VB: FieldNameAttribute
    nameWithType:
      CSharp: FieldNameAttribute
      VB: FieldNameAttribute
    qualifiedName:
      CSharp: Bundles.FieldNameAttribute
      VB: Bundles.FieldNameAttribute
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/attributes/FieldNameAttribute.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: FieldNameAttribute
      path: ../src/attributes/FieldNameAttribute.cs
      startLine: 7
    summary: "\nOverrides the BundleField&apos;s name\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [AttributeUsage(AttributeTargets.Property)]

          public class FieldNameAttribute : Attribute
        VB: >-
          <AttributeUsage(AttributeTargets.Property)>

          Public Class FieldNameAttribute

              Inherits Attribute
    inheritance:
    - System.Object
    - System.Attribute
    inheritedMembers:
    - System.Attribute.Equals(System.Object)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.GetHashCode
    - System.Attribute.IsDefaultAttribute
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
    - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
    - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
    - System.Attribute.Match(System.Object)
    - System.Attribute.TypeId
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.AttributeUsageAttribute
      ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
      arguments:
      - type: System.AttributeTargets
        value: 128
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.FieldNameAttribute.#ctor(System.String)
      commentId: M:Bundles.FieldNameAttribute.#ctor(System.String)
      language: CSharp
      name:
        CSharp: FieldNameAttribute(String)
        VB: FieldNameAttribute(String)
      nameWithType:
        CSharp: FieldNameAttribute.FieldNameAttribute(String)
        VB: FieldNameAttribute.FieldNameAttribute(String)
      qualifiedName:
        CSharp: Bundles.FieldNameAttribute.FieldNameAttribute(System.String)
        VB: Bundles.FieldNameAttribute.FieldNameAttribute(System.String)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/attributes/FieldNameAttribute.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/attributes/FieldNameAttribute.cs
        startLine: 14
      summary: "\nCreate a new FieldNameAttribute\n"
      example: []
      syntax:
        content:
          CSharp: public FieldNameAttribute(string name)
          VB: Public Sub New(name As String)
        parameters:
        - id: name
          type: System.String
          description: ''
      overload: Bundles.FieldNameAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.FieldNameAttribute.Name
      commentId: P:Bundles.FieldNameAttribute.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: FieldNameAttribute.Name
        VB: FieldNameAttribute.Name
      qualifiedName:
        CSharp: Bundles.FieldNameAttribute.Name
        VB: Bundles.FieldNameAttribute.Name
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/attributes/FieldNameAttribute.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Name
        path: ../src/attributes/FieldNameAttribute.cs
        startLine: 23
      summary: "\nThis BundleField&apos;s overridden name\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.FieldNameAttribute.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: Bundles.BundleField
    commentId: T:Bundles.BundleField
    language: CSharp
    name:
      CSharp: BundleField
      VB: BundleField
    nameWithType:
      CSharp: BundleField
      VB: BundleField
    qualifiedName:
      CSharp: Bundles.BundleField
      VB: Bundles.BundleField
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/BundleField.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleField
      path: ../src/BundleField.cs
      startLine: 5
    summary: "\nRepresents an automatically-generated <xref href=\"Bundles.Nodes.FieldNode\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: public class BundleField
        VB: Public Class BundleField
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.BundleField.#ctor(Bundles.BundleNode,System.String)
      commentId: M:Bundles.BundleField.#ctor(Bundles.BundleNode,System.String)
      language: CSharp
      name:
        CSharp: BundleField(BundleNode, String)
        VB: BundleField(BundleNode, String)
      nameWithType:
        CSharp: BundleField.BundleField(BundleNode, String)
        VB: BundleField.BundleField(BundleNode, String)
      qualifiedName:
        CSharp: Bundles.BundleField.BundleField(Bundles.BundleNode, System.String)
        VB: Bundles.BundleField.BundleField(Bundles.BundleNode, System.String)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleField.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/BundleField.cs
        startLine: 12
      summary: "\nCreate a new BundleField\n"
      example: []
      syntax:
        content:
          CSharp: public BundleField(BundleNode node, string name)
          VB: Public Sub New(node As BundleNode, name As String)
        parameters:
        - id: node
          type: Bundles.BundleNode
          description: ''
        - id: name
          type: System.String
          description: ''
      overload: Bundles.BundleField.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleField.Node
      commentId: P:Bundles.BundleField.Node
      language: CSharp
      name:
        CSharp: Node
        VB: Node
      nameWithType:
        CSharp: BundleField.Node
        VB: BundleField.Node
      qualifiedName:
        CSharp: Bundles.BundleField.Node
        VB: Bundles.BundleField.Node
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleField.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Node
        path: ../src/BundleField.cs
        startLine: 22
      summary: "\nThis field&apos;s parent Node\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode Node { get; }
          VB: Public ReadOnly Property Node As BundleNode
        parameters: []
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleField.Node*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.BundleField.Name
      commentId: P:Bundles.BundleField.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: BundleField.Name
        VB: BundleField.Name
      qualifiedName:
        CSharp: Bundles.BundleField.Name
        VB: Bundles.BundleField.Name
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleField.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Name
        path: ../src/BundleField.cs
        startLine: 28
      summary: "\nThis field&apos;s Name, as it appears in the parent node&apos;s NodePath\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; }
          VB: Public ReadOnly Property Name As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleField.Name*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.BundleField.Value
      commentId: P:Bundles.BundleField.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: BundleField.Value
        VB: BundleField.Value
      qualifiedName:
        CSharp: Bundles.BundleField.Value
        VB: Bundles.BundleField.Value
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleField.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Value
        path: ../src/BundleField.cs
        startLine: 34
      summary: "\nThis field&apos;s value\n"
      example: []
      syntax:
        content:
          CSharp: public string Value { get; set; }
          VB: Public Property Value As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleField.Value*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    references:
      Bundles.Nodes.FieldNode: 
  - id: Bundles.Bundler
    commentId: T:Bundles.Bundler
    language: CSharp
    name:
      CSharp: Bundler
      VB: Bundler
    nameWithType:
      CSharp: Bundler
      VB: Bundler
    qualifiedName:
      CSharp: Bundles.Bundler
      VB: Bundles.Bundler
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/Bundler.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: Bundler
      path: ../src/Bundler.cs
      startLine: 13
    summary: "\nRoot bundle element. Handles loading BundleDef definition files, <xref href=\"Bundles.BundleNode\" data-throw-if-not-resolved=\"false\"></xref> access, and filesystem path resolution.\n"
    example: []
    syntax:
      content:
        CSharp: public class Bundler
        VB: Public Class Bundler
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Bundler.#ctor(System.Xml.XmlDocument)
      commentId: M:Bundles.Bundler.#ctor(System.Xml.XmlDocument)
      language: CSharp
      name:
        CSharp: Bundler(XmlDocument)
        VB: Bundler(XmlDocument)
      nameWithType:
        CSharp: Bundler.Bundler(XmlDocument)
        VB: Bundler.Bundler(XmlDocument)
      qualifiedName:
        CSharp: Bundles.Bundler.Bundler(System.Xml.XmlDocument)
        VB: Bundles.Bundler.Bundler(System.Xml.XmlDocument)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/Bundler.cs
        startLine: 21
      summary: "\nCreates a new Bundler using a definition file contained in a given XmlDocument\n"
      example: []
      syntax:
        content:
          CSharp: public Bundler(XmlDocument doc)
          VB: Public Sub New(doc As XmlDocument)
        parameters:
        - id: doc
          type: System.Xml.XmlDocument
          description: ''
      overload: Bundles.Bundler.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.Bundler.#ctor(System.String)
      commentId: M:Bundles.Bundler.#ctor(System.String)
      language: CSharp
      name:
        CSharp: Bundler(String)
        VB: Bundler(String)
      nameWithType:
        CSharp: Bundler.Bundler(String)
        VB: Bundler.Bundler(String)
      qualifiedName:
        CSharp: Bundles.Bundler.Bundler(System.String)
        VB: Bundles.Bundler.Bundler(System.String)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/Bundler.cs
        startLine: 30
      summary: "\nCreates a new Bundler using a definition file at the provided path\n"
      example: []
      syntax:
        content:
          CSharp: public Bundler(string path)
          VB: Public Sub New(path As String)
        parameters:
        - id: path
          type: System.String
          description: ''
      overload: Bundles.Bundler.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.Bundler.AppRoot
      commentId: P:Bundles.Bundler.AppRoot
      language: CSharp
      name:
        CSharp: AppRoot
        VB: AppRoot
      nameWithType:
        CSharp: Bundler.AppRoot
        VB: Bundler.AppRoot
      qualifiedName:
        CSharp: Bundles.Bundler.AppRoot
        VB: Bundles.Bundler.AppRoot
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: AppRoot
        path: ../src/Bundler.cs
        startLine: 43
      summary: "\nThe application root folder&apos;s absolute path in the filesystem\n"
      remarks: "\nDefault value is <xref href=\"System.Environment.SpecialFolder.ApplicationData\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public virtual string AppRoot { get; }
          VB: Public Overridable ReadOnly Property AppRoot As String
        parameters: []
        return:
          type: System.String
      overload: Bundles.Bundler.AppRoot*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
      references:
        System.Environment.SpecialFolder.ApplicationData: 
    - id: Bundles.Bundler.DataRootFolder
      commentId: P:Bundles.Bundler.DataRootFolder
      language: CSharp
      name:
        CSharp: DataRootFolder
        VB: DataRootFolder
      nameWithType:
        CSharp: Bundler.DataRootFolder
        VB: Bundler.DataRootFolder
      qualifiedName:
        CSharp: Bundles.Bundler.DataRootFolder
        VB: Bundles.Bundler.DataRootFolder
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: DataRootFolder
        path: ../src/Bundler.cs
        startLine: 51
      summary: "\nName of this application&apos;s root folder located immediately beneath <xref href=\"Bundles.Bundler.AppRoot\" data-throw-if-not-resolved=\"false\"></xref>\n"
      remarks: "\nTo get the absolute filesystem path to this folder, use <xref href=\"Bundles.Bundler.DataRoot\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public string DataRootFolder { get; }
          VB: Public ReadOnly Property DataRootFolder As String
        parameters: []
        return:
          type: System.String
      overload: Bundles.Bundler.DataRootFolder*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Bundles.Bundler.AppRoot: 
        Bundles.Bundler.DataRoot: 
    - id: Bundles.Bundler.BundleFileExtension
      commentId: P:Bundles.Bundler.BundleFileExtension
      language: CSharp
      name:
        CSharp: BundleFileExtension
        VB: BundleFileExtension
      nameWithType:
        CSharp: Bundler.BundleFileExtension
        VB: Bundler.BundleFileExtension
      qualifiedName:
        CSharp: Bundles.Bundler.BundleFileExtension
        VB: Bundles.Bundler.BundleFileExtension
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BundleFileExtension
        path: ../src/Bundler.cs
        startLine: 57
      summary: "\nFile extension used by this Bundler&apos;s <xref href=\"Bundles.Nodes.Bundle\" data-throw-if-not-resolved=\"false\"></xref>s\n"
      example: []
      syntax:
        content:
          CSharp: public string BundleFileExtension { get; set; }
          VB: Public Property BundleFileExtension As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.Bundler.BundleFileExtension*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Bundles.Nodes.Bundle: 
    - id: Bundles.Bundler.DataRoot
      commentId: P:Bundles.Bundler.DataRoot
      language: CSharp
      name:
        CSharp: DataRoot
        VB: DataRoot
      nameWithType:
        CSharp: Bundler.DataRoot
        VB: Bundler.DataRoot
      qualifiedName:
        CSharp: Bundles.Bundler.DataRoot
        VB: Bundles.Bundler.DataRoot
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: DataRoot
        path: ../src/Bundler.cs
        startLine: 67
      summary: "\nAbsolute filesystem path to this Bundler&apos;s data root.\n"
      example: []
      syntax:
        content:
          CSharp: public string DataRoot { get; }
          VB: Public ReadOnly Property DataRoot As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.Bundler.DataRoot*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.Bundler.Data
      commentId: P:Bundles.Bundler.Data
      language: CSharp
      name:
        CSharp: Data
        VB: Data
      nameWithType:
        CSharp: Bundler.Data
        VB: Bundler.Data
      qualifiedName:
        CSharp: Bundles.Bundler.Data
        VB: Bundles.Bundler.Data
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Data
        path: ../src/Bundler.cs
        startLine: 73
      summary: "\nThis Bundler&apos;s root data node\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode Data { get; }
          VB: Public ReadOnly Property Data As BundleNode
        parameters: []
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.Bundler.Data*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.Bundler.Config
      commentId: P:Bundles.Bundler.Config
      language: CSharp
      name:
        CSharp: Config
        VB: Config
      nameWithType:
        CSharp: Bundler.Config
        VB: Bundler.Config
      qualifiedName:
        CSharp: Bundles.Bundler.Config
        VB: Bundles.Bundler.Config
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Config
        path: ../src/Bundler.cs
        startLine: 79
      summary: "\nThis Bundler&apos;s root configuration node\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode Config { get; }
          VB: Public ReadOnly Property Config As BundleNode
        parameters: []
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.Bundler.Config*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.Bundler.Options
      commentId: P:Bundles.Bundler.Options
      language: CSharp
      name:
        CSharp: Options
        VB: Options
      nameWithType:
        CSharp: Bundler.Options
        VB: Bundler.Options
      qualifiedName:
        CSharp: Bundles.Bundler.Options
        VB: Bundles.Bundler.Options
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Options
        path: ../src/Bundler.cs
        startLine: 85
      summary: "\n<xref href=\"Bundles.BundleValues\" data-throw-if-not-resolved=\"false\"></xref> view of this Bundler&apos;s options\n"
      example: []
      syntax:
        content:
          CSharp: public BundleValues Options { get; }
          VB: Public ReadOnly Property Options As BundleValues
        parameters: []
        return:
          type: Bundles.BundleValues
          description: ''
      overload: Bundles.Bundler.Options*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Bundles.BundleValues: 
    - id: Bundles.Bundler.Services
      commentId: P:Bundles.Bundler.Services
      language: CSharp
      name:
        CSharp: Services
        VB: Services
      nameWithType:
        CSharp: Bundler.Services
        VB: Bundler.Services
      qualifiedName:
        CSharp: Bundles.Bundler.Services
        VB: Bundles.Bundler.Services
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Services
        path: ../src/Bundler.cs
        startLine: 91
      summary: "\nThis Bundler&apos;s service container\n"
      example: []
      syntax:
        content:
          CSharp: public BundleServiceContainer Services { get; set; }
          VB: Public Property Services As BundleServiceContainer
        parameters: []
        return:
          type: Bundles.BundleServiceContainer
          description: ''
      overload: Bundles.Bundler.Services*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Bundles.Bundler.Build(System.Xml.XmlNode)
      commentId: M:Bundles.Bundler.Build(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: Build(XmlNode)
        VB: Build(XmlNode)
      nameWithType:
        CSharp: Bundler.Build(XmlNode)
        VB: Bundler.Build(XmlNode)
      qualifiedName:
        CSharp: Bundles.Bundler.Build(System.Xml.XmlNode)
        VB: Bundles.Bundler.Build(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Bundler.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Build
        path: ../src/Bundler.cs
        startLine: 111
      summary: "\nBuilds the Bundler&apos;s root elements\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void Build(XmlNode node)
          VB: Protected Overridable Sub Build(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
      overload: Bundles.Bundler.Build*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    references:
      Bundles.BundleNode: 
  - id: Bundles.BundleServiceContainer
    commentId: T:Bundles.BundleServiceContainer
    language: CSharp
    name:
      CSharp: BundleServiceContainer
      VB: BundleServiceContainer
    nameWithType:
      CSharp: BundleServiceContainer
      VB: BundleServiceContainer
    qualifiedName:
      CSharp: Bundles.BundleServiceContainer
      VB: Bundles.BundleServiceContainer
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/BundleServiceContainer.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleServiceContainer
      path: ../src/BundleServiceContainer.cs
      startLine: 8
    summary: "\nService container used by a <xref href=\"Bundles.Bundler\" data-throw-if-not-resolved=\"false\"></xref> and its child nodes\n"
    example: []
    syntax:
      content:
        CSharp: 'public class BundleServiceContainer : IServiceProvider'
        VB: >-
          Public Class BundleServiceContainer

              Implements IServiceProvider
    inheritance:
    - System.Object
    implements:
    - System.IServiceProvider
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.BundleServiceContainer.AddService(System.Object)
      commentId: M:Bundles.BundleServiceContainer.AddService(System.Object)
      language: CSharp
      name:
        CSharp: AddService(Object)
        VB: AddService(Object)
      nameWithType:
        CSharp: BundleServiceContainer.AddService(Object)
        VB: BundleServiceContainer.AddService(Object)
      qualifiedName:
        CSharp: Bundles.BundleServiceContainer.AddService(System.Object)
        VB: Bundles.BundleServiceContainer.AddService(System.Object)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleServiceContainer.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: AddService
        path: ../src/BundleServiceContainer.cs
        startLine: 16
      summary: "\nAdds a service to the container\n"
      example: []
      syntax:
        content:
          CSharp: public void AddService(object provider)
          VB: Public Sub AddService(provider As Object)
        parameters:
        - id: provider
          type: System.Object
          description: ''
      overload: Bundles.BundleServiceContainer.AddService*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleServiceContainer.AddService``1
      commentId: M:Bundles.BundleServiceContainer.AddService``1
      language: CSharp
      name:
        CSharp: AddService<T>()
        VB: AddService(Of T)()
      nameWithType:
        CSharp: BundleServiceContainer.AddService<T>()
        VB: BundleServiceContainer.AddService(Of T)()
      qualifiedName:
        CSharp: Bundles.BundleServiceContainer.AddService<T>()
        VB: Bundles.BundleServiceContainer.AddService(Of T)()
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleServiceContainer.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: AddService
        path: ../src/BundleServiceContainer.cs
        startLine: 26
      summary: "\nAdds a service to the container\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public void AddService<T>()

                where T : new()
          VB: Public Sub AddService(Of T As New)
        typeParameters:
        - id: T
          description: ''
      overload: Bundles.BundleServiceContainer.AddService*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleServiceContainer.GetService(System.Type)
      commentId: M:Bundles.BundleServiceContainer.GetService(System.Type)
      language: CSharp
      name:
        CSharp: GetService(Type)
        VB: GetService(Type)
      nameWithType:
        CSharp: BundleServiceContainer.GetService(Type)
        VB: BundleServiceContainer.GetService(Type)
      qualifiedName:
        CSharp: Bundles.BundleServiceContainer.GetService(System.Type)
        VB: Bundles.BundleServiceContainer.GetService(System.Type)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleServiceContainer.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: GetService
        path: ../src/BundleServiceContainer.cs
        startLine: 37
      summary: "\nRetrieves a service from the container\n"
      example: []
      syntax:
        content:
          CSharp: public object GetService(Type type)
          VB: Public Function GetService(type As Type) As Object
        parameters:
        - id: type
          type: System.Type
          description: ''
        return:
          type: System.Object
          description: Service of provided type if present; otherwise <code>null</code>
      overload: Bundles.BundleServiceContainer.GetService*
      implements:
      - System.IServiceProvider.GetService(System.Type)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleServiceContainer.GetService``1
      commentId: M:Bundles.BundleServiceContainer.GetService``1
      language: CSharp
      name:
        CSharp: GetService<T>()
        VB: GetService(Of T)()
      nameWithType:
        CSharp: BundleServiceContainer.GetService<T>()
        VB: BundleServiceContainer.GetService(Of T)()
      qualifiedName:
        CSharp: Bundles.BundleServiceContainer.GetService<T>()
        VB: Bundles.BundleServiceContainer.GetService(Of T)()
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleServiceContainer.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: GetService
        path: ../src/BundleServiceContainer.cs
        startLine: 54
      summary: "\nRetrieves a service from the container\n"
      example: []
      syntax:
        content:
          CSharp: public T GetService<T>()
          VB: Public Function GetService(Of T) As T
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}'
          description: Service of provided type if present; otherwise <code>null</code>
      overload: Bundles.BundleServiceContainer.GetService*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleServiceContainer.RemoveService``1
      commentId: M:Bundles.BundleServiceContainer.RemoveService``1
      language: CSharp
      name:
        CSharp: RemoveService<T>()
        VB: RemoveService(Of T)()
      nameWithType:
        CSharp: BundleServiceContainer.RemoveService<T>()
        VB: BundleServiceContainer.RemoveService(Of T)()
      qualifiedName:
        CSharp: Bundles.BundleServiceContainer.RemoveService<T>()
        VB: Bundles.BundleServiceContainer.RemoveService(Of T)()
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleServiceContainer.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: RemoveService
        path: ../src/BundleServiceContainer.cs
        startLine: 71
      summary: "\nRemoves service of given type from the container\n"
      example: []
      syntax:
        content:
          CSharp: public void RemoveService<T>()
          VB: Public Sub RemoveService(Of T)
        typeParameters:
        - id: T
          description: ''
      overload: Bundles.BundleServiceContainer.RemoveService*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      Bundles.Bundler: 
  - id: Bundles.BundleValues
    commentId: T:Bundles.BundleValues
    language: CSharp
    name:
      CSharp: BundleValues
      VB: BundleValues
    nameWithType:
      CSharp: BundleValues
      VB: BundleValues
    qualifiedName:
      CSharp: Bundles.BundleValues
      VB: Bundles.BundleValues
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/BundleValues.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleValues
      path: ../src/BundleValues.cs
      startLine: 10
    summary: "\nRepresents a two-way view of a <xref href=\"Bundles.BundleNode\" data-throw-if-not-resolved=\"false\"></xref>&apos;s\nchild <xref href=\"Bundles.Nodes.FieldNode\" data-throw-if-not-resolved=\"false\"></xref>s&apos; values.\n"
    example: []
    syntax:
      content:
        CSharp: public class BundleValues
        VB: Public Class BundleValues
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.BundleValues.#ctor(Bundles.BundleNode)
      commentId: M:Bundles.BundleValues.#ctor(Bundles.BundleNode)
      language: CSharp
      name:
        CSharp: BundleValues(BundleNode)
        VB: BundleValues(BundleNode)
      nameWithType:
        CSharp: BundleValues.BundleValues(BundleNode)
        VB: BundleValues.BundleValues(BundleNode)
      qualifiedName:
        CSharp: Bundles.BundleValues.BundleValues(Bundles.BundleNode)
        VB: Bundles.BundleValues.BundleValues(Bundles.BundleNode)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleValues.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/BundleValues.cs
        startLine: 16
      summary: "\nCreates a new BundleValues view\n"
      example: []
      syntax:
        content:
          CSharp: public BundleValues(BundleNode node)
          VB: Public Sub New(node As BundleNode)
        parameters:
        - id: node
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleValues.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleValues.Node
      commentId: P:Bundles.BundleValues.Node
      language: CSharp
      name:
        CSharp: Node
        VB: Node
      nameWithType:
        CSharp: BundleValues.Node
        VB: BundleValues.Node
      qualifiedName:
        CSharp: Bundles.BundleValues.Node
        VB: Bundles.BundleValues.Node
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleValues.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Node
        path: ../src/BundleValues.cs
        startLine: 25
      summary: "\nThe <xref href=\"Bundles.BundleNode\" data-throw-if-not-resolved=\"false\"></xref> this view is for.\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode Node { get; }
          VB: Public ReadOnly Property Node As BundleNode
        parameters: []
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleValues.Node*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Bundles.BundleNode: 
    - id: Bundles.BundleValues.All
      commentId: P:Bundles.BundleValues.All
      language: CSharp
      name:
        CSharp: All
        VB: All
      nameWithType:
        CSharp: BundleValues.All
        VB: BundleValues.All
      qualifiedName:
        CSharp: Bundles.BundleValues.All
        VB: Bundles.BundleValues.All
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleValues.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: All
        path: ../src/BundleValues.cs
        startLine: 31
      summary: "\nA key-value list of all values in the view\n"
      example: []
      syntax:
        content:
          CSharp: public ReadOnlyDictionary<string, string> All { get; }
          VB: Public ReadOnly Property All As ReadOnlyDictionary(Of String, String)
        parameters: []
        return:
          type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.String}
          description: ''
      overload: Bundles.BundleValues.All*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.BundleValues.Item(System.String)
      commentId: P:Bundles.BundleValues.Item(System.String)
      language: CSharp
      name:
        CSharp: Item[String]
        VB: Item(String)
      nameWithType:
        CSharp: BundleValues.Item[String]
        VB: BundleValues.Item(String)
      qualifiedName:
        CSharp: Bundles.BundleValues.Item[System.String]
        VB: Bundles.BundleValues.Item(System.String)
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleValues.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: this[]
        path: ../src/BundleValues.cs
        startLine: 37
      summary: "\nAccesses a field&apos;s value within this view by the field&apos;s name.\n"
      example: []
      syntax:
        content:
          CSharp: public string this[string id] { get; set; }
          VB: Public Property Item(id As String) As String
        parameters:
        - id: id
          type: System.String
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleValues.Item*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Bundles.BundleValues.GetAll(System.Boolean)
      commentId: M:Bundles.BundleValues.GetAll(System.Boolean)
      language: CSharp
      name:
        CSharp: GetAll(Boolean)
        VB: GetAll(Boolean)
      nameWithType:
        CSharp: BundleValues.GetAll(Boolean)
        VB: BundleValues.GetAll(Boolean)
      qualifiedName:
        CSharp: Bundles.BundleValues.GetAll(System.Boolean)
        VB: Bundles.BundleValues.GetAll(System.Boolean)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/BundleValues.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: GetAll
        path: ../src/BundleValues.cs
        startLine: 48
      summary: "\nRetrieves a read-only key/value list of all values in the view.\n"
      example: []
      syntax:
        content:
          CSharp: public ReadOnlyDictionary<string, string> GetAll(bool includeEmpty = false)
          VB: Public Function GetAll(includeEmpty As Boolean = False) As ReadOnlyDictionary(Of String, String)
        parameters:
        - id: includeEmpty
          type: System.Boolean
          description: ''
        return:
          type: System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.String}
          description: ''
      overload: Bundles.BundleValues.GetAll*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      Bundles.BundleNode: 
      Bundles.Nodes.FieldNode: 
  - id: Bundles.Extensions
    commentId: T:Bundles.Extensions
    language: CSharp
    name:
      CSharp: Extensions
      VB: Extensions
    nameWithType:
      CSharp: Extensions
      VB: Extensions
    qualifiedName:
      CSharp: Bundles.Extensions
      VB: Bundles.Extensions
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/Extensions.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: Extensions
      path: ../src/Extensions.cs
      startLine: 7
    summary: "\nExtension Methods for Bundles classes and interfaces\n"
    example: []
    syntax:
      content:
        CSharp: public static class Extensions
        VB: Public Module Extensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Bundles.Extensions.ToPath(System.String)
      commentId: M:Bundles.Extensions.ToPath(System.String)
      language: CSharp
      name:
        CSharp: ToPath(String)
        VB: ToPath(String)
      nameWithType:
        CSharp: Extensions.ToPath(String)
        VB: Extensions.ToPath(String)
      qualifiedName:
        CSharp: Bundles.Extensions.ToPath(System.String)
        VB: Bundles.Extensions.ToPath(System.String)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/Extensions.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: ToPath
        path: ../src/Extensions.cs
        startLine: 14
      summary: "\nConverts a NodePath-syntax string to a local-system-compatible path.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToPath(this string source)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToPath(source As String) As String
        parameters:
        - id: source
          type: System.String
          description: ''
        return:
          type: System.String
          description: ''
      overload: Bundles.Extensions.ToPath*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Bundles.BundleNode
    commentId: T:Bundles.BundleNode
    language: CSharp
    name:
      CSharp: BundleNode
      VB: BundleNode
    nameWithType:
      CSharp: BundleNode
      VB: BundleNode
    qualifiedName:
      CSharp: Bundles.BundleNode
      VB: Bundles.BundleNode
    type: Class
    assemblies:
    - bundle
    namespace: Bundles
    source:
      remote:
        path: src/nodes/BundleNode.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleNode
      path: ../src/nodes/BundleNode.cs
      startLine: 17
    summary: "\nRepresents a node within the filesystem layout described by a <xref href=\"Bundles.BundleNode.Bundler\" data-throw-if-not-resolved=\"false\"></xref>&apos;s\ndefinition file.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class BundleNode : IXmlSerializable'
        VB: >-
          Public Class BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.BundleNode.NodeTypes
      commentId: F:Bundles.BundleNode.NodeTypes
      language: CSharp
      name:
        CSharp: NodeTypes
        VB: NodeTypes
      nameWithType:
        CSharp: BundleNode.NodeTypes
        VB: BundleNode.NodeTypes
      qualifiedName:
        CSharp: Bundles.BundleNode.NodeTypes
        VB: Bundles.BundleNode.NodeTypes
      type: Field
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: NodeTypes
        path: ../src/nodes/BundleNode.cs
        startLine: 23
      summary: "\nContains BundleValue types and XML element names with which they are associated.\n"
      example: []
      syntax:
        content:
          CSharp: public static Dictionary<string, Type> NodeTypes
          VB: Public Shared NodeTypes As Dictionary(Of String, Type)
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.Type}
          description: ''
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Bundles.BundleNode.Item(System.String)
      commentId: P:Bundles.BundleNode.Item(System.String)
      language: CSharp
      name:
        CSharp: Item[String]
        VB: Item(String)
      nameWithType:
        CSharp: BundleNode.Item[String]
        VB: BundleNode.Item(String)
      qualifiedName:
        CSharp: Bundles.BundleNode.Item[System.String]
        VB: Bundles.BundleNode.Item(System.String)
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: this[]
        path: ../src/nodes/BundleNode.cs
        startLine: 49
      summary: "\nRetrieves a descendant of this node via relative NodePath.\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode this[string bundleName] { get; }
          VB: Public ReadOnly Property Item(bundleName As String) As BundleNode
        parameters:
        - id: bundleName
          type: System.String
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.Item*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.BundleNode.ElementName
      commentId: P:Bundles.BundleNode.ElementName
      language: CSharp
      name:
        CSharp: ElementName
        VB: ElementName
      nameWithType:
        CSharp: BundleNode.ElementName
        VB: BundleNode.ElementName
      qualifiedName:
        CSharp: Bundles.BundleNode.ElementName
        VB: Bundles.BundleNode.ElementName
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: ElementName
        path: ../src/nodes/BundleNode.cs
        startLine: 55
      summary: "\nThis BundleNode type&apos;s XML element name.\n"
      example: []
      syntax:
        content:
          CSharp: public string ElementName { get; }
          VB: Public ReadOnly Property ElementName As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleNode.ElementName*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Bundles.BundleNode.Name
      commentId: P:Bundles.BundleNode.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: BundleNode.Name
        VB: BundleNode.Name
      qualifiedName:
        CSharp: Bundles.BundleNode.Name
        VB: Bundles.BundleNode.Name
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Name
        path: ../src/nodes/BundleNode.cs
        startLine: 61
      summary: "\nThis node&apos;s Name as it appears in the NodePath.\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleNode.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Bundles.BundleNode.Value
      commentId: P:Bundles.BundleNode.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: BundleNode.Value
        VB: BundleNode.Value
      qualifiedName:
        CSharp: Bundles.BundleNode.Value
        VB: Bundles.BundleNode.Value
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Value
        path: ../src/nodes/BundleNode.cs
        startLine: 81
      summary: "\nThis node&apos;s stored Value.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual string Value { get; set; }
          VB: Public Overridable Property Value As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleNode.Value*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        - set
        VB:
        - Public
        - Overridable
    - id: Bundles.BundleNode.Values
      commentId: P:Bundles.BundleNode.Values
      language: CSharp
      name:
        CSharp: Values
        VB: Values
      nameWithType:
        CSharp: BundleNode.Values
        VB: BundleNode.Values
      qualifiedName:
        CSharp: Bundles.BundleNode.Values
        VB: Bundles.BundleNode.Values
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Values
        path: ../src/nodes/BundleNode.cs
        startLine: 101
      summary: "\n<xref href=\"Bundles.BundleValues\" data-throw-if-not-resolved=\"false\"></xref> view of this node&apos;s child <xref href=\"Bundles.Nodes.FieldNode\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
      example: []
      syntax:
        content:
          CSharp: public BundleValues Values { get; }
          VB: Public ReadOnly Property Values As BundleValues
        parameters: []
        return:
          type: Bundles.BundleValues
          description: ''
      overload: Bundles.BundleNode.Values*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Bundles.BundleValues: 
        Bundles.Nodes.FieldNode: 
    - id: Bundles.BundleNode.NodePath
      commentId: P:Bundles.BundleNode.NodePath
      language: CSharp
      name:
        CSharp: NodePath
        VB: NodePath
      nameWithType:
        CSharp: BundleNode.NodePath
        VB: BundleNode.NodePath
      qualifiedName:
        CSharp: Bundles.BundleNode.NodePath
        VB: Bundles.BundleNode.NodePath
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: NodePath
        path: ../src/nodes/BundleNode.cs
        startLine: 118
      summary: "\nDescribes this node&apos;s position in the <xref href=\"Bundles.BundleNode.Bundler\" data-throw-if-not-resolved=\"false\"></xref>&apos;s node tree.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual string NodePath { get; }
          VB: Public Overridable ReadOnly Property NodePath As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.BundleNode.NodePath*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
      references:
        Bundles.BundleNode.Bundler: 
    - id: Bundles.BundleNode.SkipWrite
      commentId: P:Bundles.BundleNode.SkipWrite
      language: CSharp
      name:
        CSharp: SkipWrite
        VB: SkipWrite
      nameWithType:
        CSharp: BundleNode.SkipWrite
        VB: BundleNode.SkipWrite
      qualifiedName:
        CSharp: Bundles.BundleNode.SkipWrite
        VB: Bundles.BundleNode.SkipWrite
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: SkipWrite
        path: ../src/nodes/BundleNode.cs
        startLine: 124
      summary: "\nIf true, this node will skip writing its contents to XML upon serialization.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual bool SkipWrite { get; }
          VB: Public Overridable ReadOnly Property SkipWrite As Boolean
        parameters: []
        return:
          type: System.Boolean
          description: ''
      overload: Bundles.BundleNode.SkipWrite*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
    - id: Bundles.BundleNode.Attributes
      commentId: P:Bundles.BundleNode.Attributes
      language: CSharp
      name:
        CSharp: Attributes
        VB: Attributes
      nameWithType:
        CSharp: BundleNode.Attributes
        VB: BundleNode.Attributes
      qualifiedName:
        CSharp: Bundles.BundleNode.Attributes
        VB: Bundles.BundleNode.Attributes
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Attributes
        path: ../src/nodes/BundleNode.cs
        startLine: 131
      summary: "\nThis node&apos;s attributes as imported from XML, defined in the Bundler&apos;s definition file,\nor explicitly set after the node&apos;s initialization.\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, string> Attributes { get; set; }
          VB: Public Property Attributes As Dictionary(Of String, String)
        parameters: []
        return:
          type: System.Collections.Generic.Dictionary{System.String,System.String}
          description: ''
      overload: Bundles.BundleNode.Attributes*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Bundles.BundleNode.Nodes
      commentId: P:Bundles.BundleNode.Nodes
      language: CSharp
      name:
        CSharp: Nodes
        VB: Nodes
      nameWithType:
        CSharp: BundleNode.Nodes
        VB: BundleNode.Nodes
      qualifiedName:
        CSharp: Bundles.BundleNode.Nodes
        VB: Bundles.BundleNode.Nodes
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Nodes
        path: ../src/nodes/BundleNode.cs
        startLine: 137
      summary: "\nThis node&apos;s descendant nodes.\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, BundleNode> Nodes { get; set; }
          VB: Public Property Nodes As Dictionary(Of String, BundleNode)
        parameters: []
        return:
          type: System.Collections.Generic.Dictionary{System.String,Bundles.BundleNode}
          description: ''
      overload: Bundles.BundleNode.Nodes*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Bundles.BundleNode.Parent
      commentId: P:Bundles.BundleNode.Parent
      language: CSharp
      name:
        CSharp: Parent
        VB: Parent
      nameWithType:
        CSharp: BundleNode.Parent
        VB: BundleNode.Parent
      qualifiedName:
        CSharp: Bundles.BundleNode.Parent
        VB: Bundles.BundleNode.Parent
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Parent
        path: ../src/nodes/BundleNode.cs
        startLine: 143
      summary: "\nThis node&apos;s parent node.\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode Parent { get; protected set; }
          VB: Public Property Parent As BundleNode
        parameters: []
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.Parent*
      modifiers:
        CSharp:
        - public
        - get
        - protected set
        VB:
        - Public
        - Get
        - Protected Set
    - id: Bundles.BundleNode.Bundler
      commentId: P:Bundles.BundleNode.Bundler
      language: CSharp
      name:
        CSharp: Bundler
        VB: Bundler
      nameWithType:
        CSharp: BundleNode.Bundler
        VB: BundleNode.Bundler
      qualifiedName:
        CSharp: Bundles.BundleNode.Bundler
        VB: Bundles.BundleNode.Bundler
      type: Property
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Bundler
        path: ../src/nodes/BundleNode.cs
        startLine: 149
      summary: "\nThe <xref href=\"Bundles.BundleNode.Bundler\" data-throw-if-not-resolved=\"false\"></xref> which owns the node tree that contains this node.\n"
      example: []
      syntax:
        content:
          CSharp: public Bundler Bundler { get; }
          VB: Public ReadOnly Property Bundler As Bundler
        parameters: []
        return:
          type: Bundles.Bundler
          description: ''
      overload: Bundles.BundleNode.Bundler*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Bundles.BundleNode.Bundler: 
    - isEii: true
      id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
      commentId: M:Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
      language: CSharp
      name:
        CSharp: IXmlSerializable.ReadXml(XmlReader)
        VB: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
      nameWithType:
        CSharp: BundleNode.IXmlSerializable.ReadXml(XmlReader)
        VB: BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
      qualifiedName:
        CSharp: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
        VB: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: System.Xml.Serialization.IXmlSerializable.ReadXml
        path: ../src/nodes/BundleNode.cs
        startLine: 153
      syntax:
        content:
          CSharp: void IXmlSerializable.ReadXml(XmlReader reader)
          VB: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
        parameters:
        - id: reader
          type: System.Xml.XmlReader
      overload: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml*
      implements:
      - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
      modifiers:
        CSharp: []
        VB: []
    - isEii: true
      id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
      commentId: M:Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
      language: CSharp
      name:
        CSharp: IXmlSerializable.WriteXml(XmlWriter)
        VB: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
      nameWithType:
        CSharp: BundleNode.IXmlSerializable.WriteXml(XmlWriter)
        VB: BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
      qualifiedName:
        CSharp: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
        VB: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: System.Xml.Serialization.IXmlSerializable.WriteXml
        path: ../src/nodes/BundleNode.cs
        startLine: 160
      syntax:
        content:
          CSharp: void IXmlSerializable.WriteXml(XmlWriter writer)
          VB: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
        parameters:
        - id: writer
          type: System.Xml.XmlWriter
      overload: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml*
      implements:
      - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
      modifiers:
        CSharp: []
        VB: []
    - id: Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
      commentId: M:Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: ReadXmlAttributes(XmlNode)
        VB: ReadXmlAttributes(XmlNode)
      nameWithType:
        CSharp: BundleNode.ReadXmlAttributes(XmlNode)
        VB: BundleNode.ReadXmlAttributes(XmlNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
        VB: Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: ReadXmlAttributes
        path: ../src/nodes/BundleNode.cs
        startLine: 172
      summary: "\nImport attributes deserialized from XML\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void ReadXmlAttributes(XmlNode node)
          VB: Protected Overridable Sub ReadXmlAttributes(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
      overload: Bundles.BundleNode.ReadXmlAttributes*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
      commentId: M:Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: ReadXmlContent(XmlNode)
        VB: ReadXmlContent(XmlNode)
      nameWithType:
        CSharp: BundleNode.ReadXmlContent(XmlNode)
        VB: BundleNode.ReadXmlContent(XmlNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
        VB: Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: ReadXmlContent
        path: ../src/nodes/BundleNode.cs
        startLine: 185
      summary: "\nImport content deserialized from XML.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void ReadXmlContent(XmlNode node)
          VB: Protected Overridable Sub ReadXmlContent(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
      overload: Bundles.BundleNode.ReadXmlContent*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
      commentId: M:Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
      language: CSharp
      name:
        CSharp: WriteXmlAttributes(XmlWriter)
        VB: WriteXmlAttributes(XmlWriter)
      nameWithType:
        CSharp: BundleNode.WriteXmlAttributes(XmlWriter)
        VB: BundleNode.WriteXmlAttributes(XmlWriter)
      qualifiedName:
        CSharp: Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
        VB: Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: WriteXmlAttributes
        path: ../src/nodes/BundleNode.cs
        startLine: 234
      summary: "\nWrite this node&apos;s attributes to XML.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void WriteXmlAttributes(XmlWriter writer)
          VB: Protected Overridable Sub WriteXmlAttributes(writer As XmlWriter)
        parameters:
        - id: writer
          type: System.Xml.XmlWriter
          description: ''
      overload: Bundles.BundleNode.WriteXmlAttributes*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
      commentId: M:Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
      language: CSharp
      name:
        CSharp: WriteXmlContent(XmlWriter)
        VB: WriteXmlContent(XmlWriter)
      nameWithType:
        CSharp: BundleNode.WriteXmlContent(XmlWriter)
        VB: BundleNode.WriteXmlContent(XmlWriter)
      qualifiedName:
        CSharp: Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
        VB: Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: WriteXmlContent
        path: ../src/nodes/BundleNode.cs
        startLine: 246
      summary: "\nWrite this node&apos;s contents to XML.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void WriteXmlContent(XmlWriter writer)
          VB: Protected Overridable Sub WriteXmlContent(writer As XmlWriter)
        parameters:
        - id: writer
          type: System.Xml.XmlWriter
          description: ''
      overload: Bundles.BundleNode.WriteXmlContent*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.Attach(Bundles.BundleNode)
      commentId: M:Bundles.BundleNode.Attach(Bundles.BundleNode)
      language: CSharp
      name:
        CSharp: Attach(BundleNode)
        VB: Attach(BundleNode)
      nameWithType:
        CSharp: BundleNode.Attach(BundleNode)
        VB: BundleNode.Attach(BundleNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.Attach(Bundles.BundleNode)
        VB: Bundles.BundleNode.Attach(Bundles.BundleNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Attach
        path: ../src/nodes/BundleNode.cs
        startLine: 266
      summary: "\nCalled when this node is attached to a parent node.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void Attach(BundleNode parentNode)
          VB: Protected Overridable Sub Attach(parentNode As BundleNode)
        parameters:
        - id: parentNode
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.Attach*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.AddChild(Bundles.BundleNode)
      commentId: M:Bundles.BundleNode.AddChild(Bundles.BundleNode)
      language: CSharp
      name:
        CSharp: AddChild(BundleNode)
        VB: AddChild(BundleNode)
      nameWithType:
        CSharp: BundleNode.AddChild(BundleNode)
        VB: BundleNode.AddChild(BundleNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.AddChild(Bundles.BundleNode)
        VB: Bundles.BundleNode.AddChild(Bundles.BundleNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: AddChild
        path: ../src/nodes/BundleNode.cs
        startLine: 275
      summary: "\nCalled when a child node is added to this node.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void AddChild(BundleNode childNode)
          VB: Protected Overridable Sub AddChild(childNode As BundleNode)
        parameters:
        - id: childNode
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.AddChild*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.AddNode(System.Xml.XmlNode)
      commentId: M:Bundles.BundleNode.AddNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: AddNode(XmlNode)
        VB: AddNode(XmlNode)
      nameWithType:
        CSharp: BundleNode.AddNode(XmlNode)
        VB: BundleNode.AddNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.AddNode(System.Xml.XmlNode)
        VB: Bundles.BundleNode.AddNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: AddNode
        path: ../src/nodes/BundleNode.cs
        startLine: 286
      summary: "\nAdds a node as a child to this node, as described in a given\nXmlNode\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode AddNode(XmlNode node)
          VB: Public Function AddNode(node As XmlNode) As BundleNode
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.AddNode*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleNode.AddNode(Bundles.BundleNode)
      commentId: M:Bundles.BundleNode.AddNode(Bundles.BundleNode)
      language: CSharp
      name:
        CSharp: AddNode(BundleNode)
        VB: AddNode(BundleNode)
      nameWithType:
        CSharp: BundleNode.AddNode(BundleNode)
        VB: BundleNode.AddNode(BundleNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.AddNode(Bundles.BundleNode)
        VB: Bundles.BundleNode.AddNode(Bundles.BundleNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: AddNode
        path: ../src/nodes/BundleNode.cs
        startLine: 316
      summary: "\nAdds the given node as a child to this node.\n"
      example: []
      syntax:
        content:
          CSharp: public void AddNode(BundleNode newNode)
          VB: Public Sub AddNode(newNode As BundleNode)
        parameters:
        - id: newNode
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.AddNode*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleNode.Merge(Bundles.BundleNode)
      commentId: M:Bundles.BundleNode.Merge(Bundles.BundleNode)
      language: CSharp
      name:
        CSharp: Merge(BundleNode)
        VB: Merge(BundleNode)
      nameWithType:
        CSharp: BundleNode.Merge(BundleNode)
        VB: BundleNode.Merge(BundleNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.Merge(Bundles.BundleNode)
        VB: Bundles.BundleNode.Merge(Bundles.BundleNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Merge
        path: ../src/nodes/BundleNode.cs
        startLine: 333
      summary: "\nMerges the given node&apos;s attributes and content into this node.\n"
      example: []
      syntax:
        content:
          CSharp: protected void Merge(BundleNode node)
          VB: Protected Sub Merge(node As BundleNode)
        parameters:
        - id: node
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.Merge*
      modifiers:
        CSharp:
        - protected
        VB:
        - Protected
    - id: Bundles.BundleNode.Build(System.Xml.XmlNode)
      commentId: M:Bundles.BundleNode.Build(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: Build(XmlNode)
        VB: Build(XmlNode)
      nameWithType:
        CSharp: BundleNode.Build(XmlNode)
        VB: BundleNode.Build(XmlNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.Build(System.Xml.XmlNode)
        VB: Bundles.BundleNode.Build(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Build
        path: ../src/nodes/BundleNode.cs
        startLine: 358
      summary: "\nBuilds node&apos;s attributes and content from a given XmlNode\n"
      example: []
      syntax:
        content:
          CSharp: public void Build(XmlNode node)
          VB: Public Sub Build(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
      overload: Bundles.BundleNode.Build*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
      commentId: M:Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildAttributes(XmlNode)
        VB: BuildAttributes(XmlNode)
      nameWithType:
        CSharp: BundleNode.BuildAttributes(XmlNode)
        VB: BundleNode.BuildAttributes(XmlNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
        VB: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildAttributes
        path: ../src/nodes/BundleNode.cs
        startLine: 392
      summary: "\nBuilds the node&apos;s attributes as described in the given XmlNode\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void BuildAttributes(XmlNode node)
          VB: Protected Overridable Sub BuildAttributes(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
      overload: Bundles.BundleNode.BuildAttributes*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      commentId: M:Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildNode(XmlNode)
        VB: BuildNode(XmlNode)
      nameWithType:
        CSharp: BundleNode.BuildNode(XmlNode)
        VB: BundleNode.BuildNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
        VB: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildNode
        path: ../src/nodes/BundleNode.cs
        startLine: 411
      summary: "\nCalled when this node is being built\n"
      remarks: "\nCalled after this node&apos;s properties and attributes are defined, but\nbefore its children are built.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void BuildNode(XmlNode node)
          VB: Protected Overridable Sub BuildNode(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
      overload: Bundles.BundleNode.BuildNode*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
      commentId: M:Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildChildren(XmlNode)
        VB: BuildChildren(XmlNode)
      nameWithType:
        CSharp: BundleNode.BuildChildren(XmlNode)
        VB: BundleNode.BuildChildren(XmlNode)
      qualifiedName:
        CSharp: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
        VB: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildChildren
        path: ../src/nodes/BundleNode.cs
        startLine: 420
      summary: "\nBuilds this node&apos;s child nodes as described in the given XmlNode.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void BuildChildren(XmlNode node)
          VB: Protected Overridable Sub BuildChildren(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
          description: ''
      overload: Bundles.BundleNode.BuildChildren*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.AddField(System.String,System.String)
      commentId: M:Bundles.BundleNode.AddField(System.String,System.String)
      language: CSharp
      name:
        CSharp: AddField(String, String)
        VB: AddField(String, String)
      nameWithType:
        CSharp: BundleNode.AddField(String, String)
        VB: BundleNode.AddField(String, String)
      qualifiedName:
        CSharp: Bundles.BundleNode.AddField(System.String, System.String)
        VB: Bundles.BundleNode.AddField(System.String, System.String)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: AddField
        path: ../src/nodes/BundleNode.cs
        startLine: 437
      summary: "\nAdds a <xref href=\"Bundles.Nodes.FieldNode\" data-throw-if-not-resolved=\"false\"></xref> as a child to this node.\n"
      example: []
      syntax:
        content:
          CSharp: public FieldNode AddField(string name, string value = null)
          VB: Public Function AddField(name As String, value As String = Nothing) As FieldNode
        parameters:
        - id: name
          type: System.String
          description: The new field&apos;s name
        - id: value
          type: System.String
          description: The new field&apos;s value
        return:
          type: Bundles.Nodes.FieldNode
          description: ''
      overload: Bundles.BundleNode.AddField*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Bundles.Nodes.FieldNode: 
    - id: Bundles.BundleNode.GetChildNode(System.String)
      commentId: M:Bundles.BundleNode.GetChildNode(System.String)
      language: CSharp
      name:
        CSharp: GetChildNode(String)
        VB: GetChildNode(String)
      nameWithType:
        CSharp: BundleNode.GetChildNode(String)
        VB: BundleNode.GetChildNode(String)
      qualifiedName:
        CSharp: Bundles.BundleNode.GetChildNode(System.String)
        VB: Bundles.BundleNode.GetChildNode(System.String)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: GetChildNode
        path: ../src/nodes/BundleNode.cs
        startLine: 463
      summary: "\nRetrieves one of this node&apos;s child nodes.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual BundleNode GetChildNode(string nodeName)
          VB: Protected Overridable Function GetChildNode(nodeName As String) As BundleNode
        parameters:
        - id: nodeName
          type: System.String
          description: Name of the child node
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.GetChildNode*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: Bundles.BundleNode.Get(System.String)
      commentId: M:Bundles.BundleNode.Get(System.String)
      language: CSharp
      name:
        CSharp: Get(String)
        VB: Get(String)
      nameWithType:
        CSharp: BundleNode.Get(String)
        VB: BundleNode.Get(String)
      qualifiedName:
        CSharp: Bundles.BundleNode.Get(System.String)
        VB: Bundles.BundleNode.Get(System.String)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Get
        path: ../src/nodes/BundleNode.cs
        startLine: 474
      summary: "\nRetrieves one of this node&apos;s descendants using NodePath syntax.\n"
      example: []
      syntax:
        content:
          CSharp: public BundleNode Get(string path)
          VB: Public Function Get(path As String) As BundleNode
        parameters:
        - id: path
          type: System.String
          description: ''
        return:
          type: Bundles.BundleNode
          description: ''
      overload: Bundles.BundleNode.Get*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.BundleNode.Get``1(System.String)
      commentId: M:Bundles.BundleNode.Get``1(System.String)
      language: CSharp
      name:
        CSharp: Get<T>(String)
        VB: Get(Of T)(String)
      nameWithType:
        CSharp: BundleNode.Get<T>(String)
        VB: BundleNode.Get(Of T)(String)
      qualifiedName:
        CSharp: Bundles.BundleNode.Get<T>(System.String)
        VB: Bundles.BundleNode.Get(Of T)(System.String)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles
      source:
        remote:
          path: src/nodes/BundleNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Get
        path: ../src/nodes/BundleNode.cs
        startLine: 482
      summary: "\nRetrieves one of this node&apos;s descendants using NodePath syntax.\n"
      example: []
      syntax:
        content:
          CSharp: >-
            public T Get<T>(string path)

                where T : BundleNode, new()
          VB: Public Function Get(Of T As {BundleNode, New})(path As String) As T
        parameters:
        - id: path
          type: System.String
          description: ''
        typeParameters:
        - id: T
          description: ''
        return:
          type: '{T}'
          description: ''
      overload: Bundles.BundleNode.Get*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      Bundles.BundleNode.Bundler: 
- id: Bundles.Nodes
  commentId: N:Bundles.Nodes
  language: CSharp
  name:
    CSharp: Bundles.Nodes
    VB: Bundles.Nodes
  nameWithType:
    CSharp: Bundles.Nodes
    VB: Bundles.Nodes
  qualifiedName:
    CSharp: Bundles.Nodes
    VB: Bundles.Nodes
  type: Namespace
  assemblies:
  - bundle
  modifiers: {}
  items:
  - id: Bundles.Nodes.Bundle
    commentId: T:Bundles.Nodes.Bundle
    language: CSharp
    name:
      CSharp: Bundle
      VB: Bundle
    nameWithType:
      CSharp: Bundle
      VB: Bundle
    qualifiedName:
      CSharp: Bundles.Nodes.Bundle
      VB: Bundles.Nodes.Bundle
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/data/Bundle.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: Bundle
      path: ../src/nodes/data/Bundle.cs
      startLine: 13
    summary: "\nA Bundle represents a complete data entity that can be loaded and saved to a\npredetermined location on the filesystem or to/from a given stream\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("Bundle")]

          public class Bundle : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("Bundle")>

          Public Class Bundle

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: Bundle
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.Bundle.SavePath
      commentId: P:Bundles.Nodes.Bundle.SavePath
      language: CSharp
      name:
        CSharp: SavePath
        VB: SavePath
      nameWithType:
        CSharp: Bundle.SavePath
        VB: Bundle.SavePath
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.SavePath
        VB: Bundles.Nodes.Bundle.SavePath
      type: Property
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: SavePath
        path: ../src/nodes/data/Bundle.cs
        startLine: 20
      summary: "\nLocation in the filesystem to which this bundle will save and attempt to load from\n"
      example: []
      syntax:
        content:
          CSharp: public virtual string SavePath { get; }
          VB: Public Overridable ReadOnly Property SavePath As String
        parameters: []
        return:
          type: System.String
          description: ''
      overload: Bundles.Nodes.Bundle.SavePath*
      modifiers:
        CSharp:
        - public
        - virtual
        - get
        VB:
        - Public
        - Overridable
        - ReadOnly
    - id: Bundles.Nodes.Bundle.XmlWriterSettings
      commentId: P:Bundles.Nodes.Bundle.XmlWriterSettings
      language: CSharp
      name:
        CSharp: XmlWriterSettings
        VB: XmlWriterSettings
      nameWithType:
        CSharp: Bundle.XmlWriterSettings
        VB: Bundle.XmlWriterSettings
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.XmlWriterSettings
        VB: Bundles.Nodes.Bundle.XmlWriterSettings
      type: Property
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: XmlWriterSettings
        path: ../src/nodes/data/Bundle.cs
        startLine: 26
      summary: "\nXmlSettings reference used by the Bundle&apos;s default XmlSerializer\n"
      example: []
      syntax:
        content:
          CSharp: public XmlWriterSettings XmlWriterSettings { get; set; }
          VB: Public Property XmlWriterSettings As XmlWriterSettings
        parameters: []
        return:
          type: System.Xml.XmlWriterSettings
          description: ''
      overload: Bundles.Nodes.Bundle.XmlWriterSettings*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Bundles.Nodes.Bundle.Attach(Bundles.BundleNode)
      commentId: M:Bundles.Nodes.Bundle.Attach(Bundles.BundleNode)
      language: CSharp
      name:
        CSharp: Attach(BundleNode)
        VB: Attach(BundleNode)
      nameWithType:
        CSharp: Bundle.Attach(BundleNode)
        VB: Bundle.Attach(BundleNode)
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.Attach(Bundles.BundleNode)
        VB: Bundles.Nodes.Bundle.Attach(Bundles.BundleNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Attach
        path: ../src/nodes/data/Bundle.cs
        startLine: 39
      example: []
      syntax:
        content:
          CSharp: protected sealed override void Attach(BundleNode parentNode)
          VB: Protected NotOverridable Overrides Sub Attach(parentNode As BundleNode)
        parameters:
        - id: parentNode
          type: Bundles.BundleNode
      overload: Bundles.Nodes.Bundle.Attach*
      overridden: Bundles.BundleNode.Attach(Bundles.BundleNode)
      modifiers:
        CSharp:
        - protected
        - sealed
        - override
        VB:
        - Protected
        - Overrides
        - NotOverridable
    - id: Bundles.Nodes.Bundle.WriteXmlAttributes(System.Xml.XmlWriter)
      commentId: M:Bundles.Nodes.Bundle.WriteXmlAttributes(System.Xml.XmlWriter)
      language: CSharp
      name:
        CSharp: WriteXmlAttributes(XmlWriter)
        VB: WriteXmlAttributes(XmlWriter)
      nameWithType:
        CSharp: Bundle.WriteXmlAttributes(XmlWriter)
        VB: Bundle.WriteXmlAttributes(XmlWriter)
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.WriteXmlAttributes(System.Xml.XmlWriter)
        VB: Bundles.Nodes.Bundle.WriteXmlAttributes(System.Xml.XmlWriter)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: WriteXmlAttributes
        path: ../src/nodes/data/Bundle.cs
        startLine: 64
      example: []
      syntax:
        content:
          CSharp: protected override void WriteXmlAttributes(XmlWriter writer)
          VB: Protected Overrides Sub WriteXmlAttributes(writer As XmlWriter)
        parameters:
        - id: writer
          type: System.Xml.XmlWriter
      overload: Bundles.Nodes.Bundle.WriteXmlAttributes*
      overridden: Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.Bundle.Save
      commentId: M:Bundles.Nodes.Bundle.Save
      language: CSharp
      name:
        CSharp: Save()
        VB: Save()
      nameWithType:
        CSharp: Bundle.Save()
        VB: Bundle.Save()
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.Save()
        VB: Bundles.Nodes.Bundle.Save()
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Save
        path: ../src/nodes/data/Bundle.cs
        startLine: 73
      summary: "\nSave the Bundle to the location specified by <xref href=\"Bundles.Nodes.Bundle.SavePath\" data-throw-if-not-resolved=\"false\"></xref>\nusing the Bundle&apos;s default <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void Save()
          VB: Public Sub Save
      overload: Bundles.Nodes.Bundle.Save*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Bundles.Nodes.Bundle.SavePath: 
        System.Xml.Serialization.XmlSerializer: 
    - id: Bundles.Nodes.Bundle.SaveToStream(System.IO.Stream)
      commentId: M:Bundles.Nodes.Bundle.SaveToStream(System.IO.Stream)
      language: CSharp
      name:
        CSharp: SaveToStream(Stream)
        VB: SaveToStream(Stream)
      nameWithType:
        CSharp: Bundle.SaveToStream(Stream)
        VB: Bundle.SaveToStream(Stream)
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.SaveToStream(System.IO.Stream)
        VB: Bundles.Nodes.Bundle.SaveToStream(System.IO.Stream)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: SaveToStream
        path: ../src/nodes/data/Bundle.cs
        startLine: 98
      summary: "\nSave the Bundle to the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void SaveToStream(Stream stream)
          VB: Public Overridable Sub SaveToStream(stream As Stream)
        parameters:
        - id: stream
          type: System.IO.Stream
          description: ''
      overload: Bundles.Nodes.Bundle.SaveToStream*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        System.IO.Stream: 
    - id: Bundles.Nodes.Bundle.Load
      commentId: M:Bundles.Nodes.Bundle.Load
      language: CSharp
      name:
        CSharp: Load()
        VB: Load()
      nameWithType:
        CSharp: Bundle.Load()
        VB: Bundle.Load()
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.Load()
        VB: Bundles.Nodes.Bundle.Load()
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Load
        path: ../src/nodes/data/Bundle.cs
        startLine: 108
      summary: "\nLoad the Bundle&apos;s information from a local file specified by <xref href=\"Bundles.Nodes.Bundle.SavePath\" data-throw-if-not-resolved=\"false\"></xref>\nusing the Bundle&apos;s default <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public void Load()
          VB: Public Sub Load
      overload: Bundles.Nodes.Bundle.Load*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Bundles.Nodes.Bundle.SavePath: 
        System.Xml.Serialization.XmlSerializer: 
    - id: Bundles.Nodes.Bundle.LoadFromStream(System.IO.Stream)
      commentId: M:Bundles.Nodes.Bundle.LoadFromStream(System.IO.Stream)
      language: CSharp
      name:
        CSharp: LoadFromStream(Stream)
        VB: LoadFromStream(Stream)
      nameWithType:
        CSharp: Bundle.LoadFromStream(Stream)
        VB: Bundle.LoadFromStream(Stream)
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.LoadFromStream(System.IO.Stream)
        VB: Bundles.Nodes.Bundle.LoadFromStream(System.IO.Stream)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: LoadFromStream
        path: ../src/nodes/data/Bundle.cs
        startLine: 128
      summary: "\nLoad the Bundle&apos;s information from the given <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void LoadFromStream(Stream stream)
          VB: Public Overridable Sub LoadFromStream(stream As Stream)
        parameters:
        - id: stream
          type: System.IO.Stream
          description: ''
      overload: Bundles.Nodes.Bundle.LoadFromStream*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        System.IO.Stream: 
    - id: Bundles.Nodes.Bundle.TryLoad
      commentId: M:Bundles.Nodes.Bundle.TryLoad
      language: CSharp
      name:
        CSharp: TryLoad()
        VB: TryLoad()
      nameWithType:
        CSharp: Bundle.TryLoad()
        VB: Bundle.TryLoad()
      qualifiedName:
        CSharp: Bundles.Nodes.Bundle.TryLoad()
        VB: Bundles.Nodes.Bundle.TryLoad()
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Bundle.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: TryLoad
        path: ../src/nodes/data/Bundle.cs
        startLine: 140
      summary: "\nAttempt to load the Bundle&apos;s information from a local file specified by <xref href=\"Bundles.Nodes.Bundle.SavePath\" data-throw-if-not-resolved=\"false\"></xref>\nusing the Bundle&apos;s default <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public bool TryLoad()
          VB: Public Function TryLoad As Boolean
        return:
          type: System.Boolean
          description: <code>true</code> if success, <code>false</code> if failure
      overload: Bundles.Nodes.Bundle.TryLoad*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Bundles.Nodes.Bundle.SavePath: 
        System.Xml.Serialization.XmlSerializer: 
  - id: Bundles.Nodes.BundleData
    commentId: T:Bundles.Nodes.BundleData
    language: CSharp
    name:
      CSharp: BundleData
      VB: BundleData
    nameWithType:
      CSharp: BundleData
      VB: BundleData
    qualifiedName:
      CSharp: Bundles.Nodes.BundleData
      VB: Bundles.Nodes.BundleData
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/data/BundleData.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleData
      path: ../src/nodes/data/BundleData.cs
      startLine: 9
    summary: "\nRepresents a <xref href=\"Bundles.Bundler\" data-throw-if-not-resolved=\"false\"></xref>&apos;s root data node\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("Data")]

          public class BundleData : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("Data")>

          Public Class BundleData

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: Data
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.BundleData.#ctor(Bundles.Bundler)
      commentId: M:Bundles.Nodes.BundleData.#ctor(Bundles.Bundler)
      language: CSharp
      name:
        CSharp: BundleData(Bundler)
        VB: BundleData(Bundler)
      nameWithType:
        CSharp: BundleData.BundleData(Bundler)
        VB: BundleData.BundleData(Bundler)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleData.BundleData(Bundles.Bundler)
        VB: Bundles.Nodes.BundleData.BundleData(Bundles.Bundler)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/BundleData.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/nodes/data/BundleData.cs
        startLine: 16
      summary: "\nCreates a new BundleData node associated with the given <xref href=\"Bundles.Bundler\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public BundleData(Bundler bundler)
          VB: Public Sub New(bundler As Bundler)
        parameters:
        - id: bundler
          type: Bundles.Bundler
          description: ''
      overload: Bundles.Nodes.BundleData.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Bundles.Bundler: 
    - id: Bundles.Nodes.BundleData.NodePath
      commentId: P:Bundles.Nodes.BundleData.NodePath
      language: CSharp
      name:
        CSharp: NodePath
        VB: NodePath
      nameWithType:
        CSharp: BundleData.NodePath
        VB: BundleData.NodePath
      qualifiedName:
        CSharp: Bundles.Nodes.BundleData.NodePath
        VB: Bundles.Nodes.BundleData.NodePath
      type: Property
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/BundleData.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: NodePath
        path: ../src/nodes/data/BundleData.cs
        startLine: 22
      example: []
      syntax:
        content:
          CSharp: public override string NodePath { get; }
          VB: Public Overrides ReadOnly Property NodePath As String
        parameters: []
        return:
          type: System.String
      overload: Bundles.Nodes.BundleData.NodePath*
      overridden: Bundles.BundleNode.NodePath
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: Bundles.Nodes.BundleData.BuildNode(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.BundleData.BuildNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildNode(XmlNode)
        VB: BuildNode(XmlNode)
      nameWithType:
        CSharp: BundleData.BuildNode(XmlNode)
        VB: BundleData.BuildNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleData.BuildNode(System.Xml.XmlNode)
        VB: Bundles.Nodes.BundleData.BuildNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/BundleData.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildNode
        path: ../src/nodes/data/BundleData.cs
        startLine: 25
      example: []
      syntax:
        content:
          CSharp: protected override void BuildNode(XmlNode node)
          VB: Protected Overrides Sub BuildNode(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.BundleData.BuildNode*
      overridden: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      Bundles.Bundler: 
  - id: Bundles.Nodes.FieldNode
    commentId: T:Bundles.Nodes.FieldNode
    language: CSharp
    name:
      CSharp: FieldNode
      VB: FieldNode
    nameWithType:
      CSharp: FieldNode
      VB: FieldNode
    qualifiedName:
      CSharp: Bundles.Nodes.FieldNode
      VB: Bundles.Nodes.FieldNode
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/data/FieldNode.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: FieldNode
      path: ../src/nodes/data/FieldNode.cs
      startLine: 9
    summary: "\nRepresents a single data value assocated with the parent node\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("Field")]

          public class FieldNode : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("Field")>

          Public Class FieldNode

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: Field
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.FieldNode.SkipWrite
      commentId: P:Bundles.Nodes.FieldNode.SkipWrite
      language: CSharp
      name:
        CSharp: SkipWrite
        VB: SkipWrite
      nameWithType:
        CSharp: FieldNode.SkipWrite
        VB: FieldNode.SkipWrite
      qualifiedName:
        CSharp: Bundles.Nodes.FieldNode.SkipWrite
        VB: Bundles.Nodes.FieldNode.SkipWrite
      type: Property
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/FieldNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: SkipWrite
        path: ../src/nodes/data/FieldNode.cs
        startLine: 13
      example: []
      syntax:
        content:
          CSharp: public override bool SkipWrite { get; }
          VB: Public Overrides ReadOnly Property SkipWrite As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Bundles.Nodes.FieldNode.SkipWrite*
      overridden: Bundles.BundleNode.SkipWrite
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: Bundles.Nodes.FieldNode.WriteXmlAttributes(System.Xml.XmlWriter)
      commentId: M:Bundles.Nodes.FieldNode.WriteXmlAttributes(System.Xml.XmlWriter)
      language: CSharp
      name:
        CSharp: WriteXmlAttributes(XmlWriter)
        VB: WriteXmlAttributes(XmlWriter)
      nameWithType:
        CSharp: FieldNode.WriteXmlAttributes(XmlWriter)
        VB: FieldNode.WriteXmlAttributes(XmlWriter)
      qualifiedName:
        CSharp: Bundles.Nodes.FieldNode.WriteXmlAttributes(System.Xml.XmlWriter)
        VB: Bundles.Nodes.FieldNode.WriteXmlAttributes(System.Xml.XmlWriter)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/FieldNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: WriteXmlAttributes
        path: ../src/nodes/data/FieldNode.cs
        startLine: 16
      example: []
      syntax:
        content:
          CSharp: protected override void WriteXmlAttributes(XmlWriter writer)
          VB: Protected Overrides Sub WriteXmlAttributes(writer As XmlWriter)
        parameters:
        - id: writer
          type: System.Xml.XmlWriter
      overload: Bundles.Nodes.FieldNode.WriteXmlAttributes*
      overridden: Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.FieldNode.WriteXmlContent(System.Xml.XmlWriter)
      commentId: M:Bundles.Nodes.FieldNode.WriteXmlContent(System.Xml.XmlWriter)
      language: CSharp
      name:
        CSharp: WriteXmlContent(XmlWriter)
        VB: WriteXmlContent(XmlWriter)
      nameWithType:
        CSharp: FieldNode.WriteXmlContent(XmlWriter)
        VB: FieldNode.WriteXmlContent(XmlWriter)
      qualifiedName:
        CSharp: Bundles.Nodes.FieldNode.WriteXmlContent(System.Xml.XmlWriter)
        VB: Bundles.Nodes.FieldNode.WriteXmlContent(System.Xml.XmlWriter)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/FieldNode.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: WriteXmlContent
        path: ../src/nodes/data/FieldNode.cs
        startLine: 25
      example: []
      syntax:
        content:
          CSharp: protected override void WriteXmlContent(XmlWriter writer)
          VB: Protected Overrides Sub WriteXmlContent(writer As XmlWriter)
        parameters:
        - id: writer
          type: System.Xml.XmlWriter
      overload: Bundles.Nodes.FieldNode.WriteXmlContent*
      overridden: Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Bundles.Nodes.Folder
    commentId: T:Bundles.Nodes.Folder
    language: CSharp
    name:
      CSharp: Folder
      VB: Folder
    nameWithType:
      CSharp: Folder
      VB: Folder
    qualifiedName:
      CSharp: Bundles.Nodes.Folder
      VB: Bundles.Nodes.Folder
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/data/Folder.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: Folder
      path: ../src/nodes/data/Folder.cs
      startLine: 9
    summary: "\nRepresents a folder in the filesystem\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("Folder")]

          public class Folder : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("Folder")>

          Public Class Folder

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: Folder
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.Folder.BuildNode(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.Folder.BuildNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildNode(XmlNode)
        VB: BuildNode(XmlNode)
      nameWithType:
        CSharp: Folder.BuildNode(XmlNode)
        VB: Folder.BuildNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.Folder.BuildNode(System.Xml.XmlNode)
        VB: Bundles.Nodes.Folder.BuildNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/Folder.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildNode
        path: ../src/nodes/data/Folder.cs
        startLine: 13
      example: []
      syntax:
        content:
          CSharp: protected override void BuildNode(XmlNode node)
          VB: Protected Overrides Sub BuildNode(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.Folder.BuildNode*
      overridden: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Bundles.Nodes.FolderList
    commentId: T:Bundles.Nodes.FolderList
    language: CSharp
    name:
      CSharp: FolderList
      VB: FolderList
    nameWithType:
      CSharp: FolderList
      VB: FolderList
    qualifiedName:
      CSharp: Bundles.Nodes.FolderList
      VB: Bundles.Nodes.FolderList
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/data/FolderList.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: FolderList
      path: ../src/nodes/data/FolderList.cs
      startLine: 9
    summary: "\nRepresents an abstract collection of folders with homogenous contents\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("FolderList")]

          public class FolderList : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("FolderList")>

          Public Class FolderList

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: FolderList
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.FolderList.BuildNode(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.FolderList.BuildNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildNode(XmlNode)
        VB: BuildNode(XmlNode)
      nameWithType:
        CSharp: FolderList.BuildNode(XmlNode)
        VB: FolderList.BuildNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.FolderList.BuildNode(System.Xml.XmlNode)
        VB: Bundles.Nodes.FolderList.BuildNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/FolderList.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildNode
        path: ../src/nodes/data/FolderList.cs
        startLine: 15
      example: []
      syntax:
        content:
          CSharp: protected override void BuildNode(XmlNode node)
          VB: Protected Overrides Sub BuildNode(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.FolderList.BuildNode*
      overridden: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.FolderList.BuildChildren(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.FolderList.BuildChildren(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildChildren(XmlNode)
        VB: BuildChildren(XmlNode)
      nameWithType:
        CSharp: FolderList.BuildChildren(XmlNode)
        VB: FolderList.BuildChildren(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.FolderList.BuildChildren(System.Xml.XmlNode)
        VB: Bundles.Nodes.FolderList.BuildChildren(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/FolderList.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildChildren
        path: ../src/nodes/data/FolderList.cs
        startLine: 21
      example: []
      syntax:
        content:
          CSharp: protected override void BuildChildren(XmlNode node)
          VB: Protected Overrides Sub BuildChildren(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.FolderList.BuildChildren*
      overridden: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.FolderList.GetChildNode(System.String)
      commentId: M:Bundles.Nodes.FolderList.GetChildNode(System.String)
      language: CSharp
      name:
        CSharp: GetChildNode(String)
        VB: GetChildNode(String)
      nameWithType:
        CSharp: FolderList.GetChildNode(String)
        VB: FolderList.GetChildNode(String)
      qualifiedName:
        CSharp: Bundles.Nodes.FolderList.GetChildNode(System.String)
        VB: Bundles.Nodes.FolderList.GetChildNode(System.String)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/FolderList.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: GetChildNode
        path: ../src/nodes/data/FolderList.cs
        startLine: 28
      example: []
      syntax:
        content:
          CSharp: protected override BundleNode GetChildNode(string nodeName)
          VB: Protected Overrides Function GetChildNode(nodeName As String) As BundleNode
        parameters:
        - id: nodeName
          type: System.String
        return:
          type: Bundles.BundleNode
      overload: Bundles.Nodes.FolderList.GetChildNode*
      overridden: Bundles.BundleNode.GetChildNode(System.String)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Bundles.Nodes.ListItem
    commentId: T:Bundles.Nodes.ListItem
    language: CSharp
    name:
      CSharp: ListItem
      VB: ListItem
    nameWithType:
      CSharp: ListItem
      VB: ListItem
    qualifiedName:
      CSharp: Bundles.Nodes.ListItem
      VB: Bundles.Nodes.ListItem
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/data/ListItem.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: ListItem
      path: ../src/nodes/data/ListItem.cs
      startLine: 5
    summary: "\nRepresents a generic item contained in a <xref href=\"Bundles.Nodes.NodeList\" data-throw-if-not-resolved=\"false\"></xref> node\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("ListItem")]

          public class ListItem : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("ListItem")>

          Public Class ListItem

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: ListItem
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
    references:
      Bundles.Nodes.NodeList: 
  - id: Bundles.Nodes.NodeList
    commentId: T:Bundles.Nodes.NodeList
    language: CSharp
    name:
      CSharp: NodeList
      VB: NodeList
    nameWithType:
      CSharp: NodeList
      VB: NodeList
    qualifiedName:
      CSharp: Bundles.Nodes.NodeList
      VB: Bundles.Nodes.NodeList
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/data/NodeList.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: NodeList
      path: ../src/nodes/data/NodeList.cs
      startLine: 7
    summary: "\nRepresents an abstract collection of nodes with homogenous contents\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("List")]

          public class NodeList : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("List")>

          Public Class NodeList

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: List
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.NodeList.SkipWrite
      commentId: P:Bundles.Nodes.NodeList.SkipWrite
      language: CSharp
      name:
        CSharp: SkipWrite
        VB: SkipWrite
      nameWithType:
        CSharp: NodeList.SkipWrite
        VB: NodeList.SkipWrite
      qualifiedName:
        CSharp: Bundles.Nodes.NodeList.SkipWrite
        VB: Bundles.Nodes.NodeList.SkipWrite
      type: Property
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/NodeList.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: SkipWrite
        path: ../src/nodes/data/NodeList.cs
        startLine: 13
      example: []
      syntax:
        content:
          CSharp: public override bool SkipWrite { get; }
          VB: Public Overrides ReadOnly Property SkipWrite As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Bundles.Nodes.NodeList.SkipWrite*
      overridden: Bundles.BundleNode.SkipWrite
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: Bundles.Nodes.NodeList.BuildNode(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.NodeList.BuildNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildNode(XmlNode)
        VB: BuildNode(XmlNode)
      nameWithType:
        CSharp: NodeList.BuildNode(XmlNode)
        VB: NodeList.BuildNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.NodeList.BuildNode(System.Xml.XmlNode)
        VB: Bundles.Nodes.NodeList.BuildNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/NodeList.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildNode
        path: ../src/nodes/data/NodeList.cs
        startLine: 16
      example: []
      syntax:
        content:
          CSharp: protected override void BuildNode(XmlNode node)
          VB: Protected Overrides Sub BuildNode(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.NodeList.BuildNode*
      overridden: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.NodeList.BuildChildren(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.NodeList.BuildChildren(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildChildren(XmlNode)
        VB: BuildChildren(XmlNode)
      nameWithType:
        CSharp: NodeList.BuildChildren(XmlNode)
        VB: NodeList.BuildChildren(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.NodeList.BuildChildren(System.Xml.XmlNode)
        VB: Bundles.Nodes.NodeList.BuildChildren(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/NodeList.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildChildren
        path: ../src/nodes/data/NodeList.cs
        startLine: 22
      example: []
      syntax:
        content:
          CSharp: protected override void BuildChildren(XmlNode node)
          VB: Protected Overrides Sub BuildChildren(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.NodeList.BuildChildren*
      overridden: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.NodeList.GetChildNode(System.String)
      commentId: M:Bundles.Nodes.NodeList.GetChildNode(System.String)
      language: CSharp
      name:
        CSharp: GetChildNode(String)
        VB: GetChildNode(String)
      nameWithType:
        CSharp: NodeList.GetChildNode(String)
        VB: NodeList.GetChildNode(String)
      qualifiedName:
        CSharp: Bundles.Nodes.NodeList.GetChildNode(System.String)
        VB: Bundles.Nodes.NodeList.GetChildNode(System.String)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/data/NodeList.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: GetChildNode
        path: ../src/nodes/data/NodeList.cs
        startLine: 29
      example: []
      syntax:
        content:
          CSharp: protected override BundleNode GetChildNode(string nodeName)
          VB: Protected Overrides Function GetChildNode(nodeName As String) As BundleNode
        parameters:
        - id: nodeName
          type: System.String
        return:
          type: Bundles.BundleNode
      overload: Bundles.Nodes.NodeList.GetChildNode*
      overridden: Bundles.BundleNode.GetChildNode(System.String)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Bundles.Nodes.BundleConfig
    commentId: T:Bundles.Nodes.BundleConfig
    language: CSharp
    name:
      CSharp: BundleConfig
      VB: BundleConfig
    nameWithType:
      CSharp: BundleConfig
      VB: BundleConfig
    qualifiedName:
      CSharp: Bundles.Nodes.BundleConfig
      VB: Bundles.Nodes.BundleConfig
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/options/BundleConfig.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleConfig
      path: ../src/nodes/options/BundleConfig.cs
      startLine: 10
    summary: "\nRepresents a <xref href=\"Bundles.Bundler\" data-throw-if-not-resolved=\"false\"></xref>&apos;s root options node\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("Config")]

          public class BundleConfig : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("Config")>

          Public Class BundleConfig

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: Config
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.BundleConfig.#ctor(Bundles.Bundler)
      commentId: M:Bundles.Nodes.BundleConfig.#ctor(Bundles.Bundler)
      language: CSharp
      name:
        CSharp: BundleConfig(Bundler)
        VB: BundleConfig(Bundler)
      nameWithType:
        CSharp: BundleConfig.BundleConfig(Bundler)
        VB: BundleConfig.BundleConfig(Bundler)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleConfig.BundleConfig(Bundles.Bundler)
        VB: Bundles.Nodes.BundleConfig.BundleConfig(Bundles.Bundler)
      type: Constructor
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleConfig.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: .ctor
        path: ../src/nodes/options/BundleConfig.cs
        startLine: 17
      summary: "\nCreates a new BundleConfig\n"
      example: []
      syntax:
        content:
          CSharp: public BundleConfig(Bundler bundler)
          VB: Public Sub New(bundler As Bundler)
        parameters:
        - id: bundler
          type: Bundles.Bundler
          description: ''
      overload: Bundles.Nodes.BundleConfig.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Bundles.Nodes.BundleConfig.NodePath
      commentId: P:Bundles.Nodes.BundleConfig.NodePath
      language: CSharp
      name:
        CSharp: NodePath
        VB: NodePath
      nameWithType:
        CSharp: BundleConfig.NodePath
        VB: BundleConfig.NodePath
      qualifiedName:
        CSharp: Bundles.Nodes.BundleConfig.NodePath
        VB: Bundles.Nodes.BundleConfig.NodePath
      type: Property
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleConfig.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: NodePath
        path: ../src/nodes/options/BundleConfig.cs
        startLine: 23
      example: []
      syntax:
        content:
          CSharp: public override string NodePath { get; }
          VB: Public Overrides ReadOnly Property NodePath As String
        parameters: []
        return:
          type: System.String
      overload: Bundles.Nodes.BundleConfig.NodePath*
      overridden: Bundles.BundleNode.NodePath
      modifiers:
        CSharp:
        - public
        - override
        - get
        VB:
        - Public
        - Overrides
        - ReadOnly
    - id: Bundles.Nodes.BundleConfig.BuildAttributes(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.BundleConfig.BuildAttributes(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildAttributes(XmlNode)
        VB: BuildAttributes(XmlNode)
      nameWithType:
        CSharp: BundleConfig.BuildAttributes(XmlNode)
        VB: BundleConfig.BuildAttributes(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleConfig.BuildAttributes(System.Xml.XmlNode)
        VB: Bundles.Nodes.BundleConfig.BuildAttributes(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleConfig.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildAttributes
        path: ../src/nodes/options/BundleConfig.cs
        startLine: 26
      example: []
      syntax:
        content:
          CSharp: protected override void BuildAttributes(XmlNode node)
          VB: Protected Overrides Sub BuildAttributes(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.BundleConfig.BuildAttributes*
      overridden: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.BundleConfig.BuildNode(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.BundleConfig.BuildNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildNode(XmlNode)
        VB: BuildNode(XmlNode)
      nameWithType:
        CSharp: BundleConfig.BuildNode(XmlNode)
        VB: BundleConfig.BuildNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleConfig.BuildNode(System.Xml.XmlNode)
        VB: Bundles.Nodes.BundleConfig.BuildNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleConfig.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildNode
        path: ../src/nodes/options/BundleConfig.cs
        startLine: 35
      example: []
      syntax:
        content:
          CSharp: protected override void BuildNode(XmlNode node)
          VB: Protected Overrides Sub BuildNode(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.BundleConfig.BuildNode*
      overridden: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: Bundles.Nodes.BundleConfig.BuildChildren(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.BundleConfig.BuildChildren(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildChildren(XmlNode)
        VB: BuildChildren(XmlNode)
      nameWithType:
        CSharp: BundleConfig.BuildChildren(XmlNode)
        VB: BundleConfig.BuildChildren(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleConfig.BuildChildren(System.Xml.XmlNode)
        VB: Bundles.Nodes.BundleConfig.BuildChildren(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleConfig.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildChildren
        path: ../src/nodes/options/BundleConfig.cs
        startLine: 44
      example: []
      syntax:
        content:
          CSharp: protected override void BuildChildren(XmlNode node)
          VB: Protected Overrides Sub BuildChildren(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.BundleConfig.BuildChildren*
      overridden: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      Bundles.Bundler: 
  - id: Bundles.Nodes.BundleExtension
    commentId: T:Bundles.Nodes.BundleExtension
    language: CSharp
    name:
      CSharp: BundleExtension
      VB: BundleExtension
    nameWithType:
      CSharp: BundleExtension
      VB: BundleExtension
    qualifiedName:
      CSharp: Bundles.Nodes.BundleExtension
      VB: Bundles.Nodes.BundleExtension
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/options/BundleExtension.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleExtension
      path: ../src/nodes/options/BundleExtension.cs
      startLine: 8
    summary: "\nOption defining the file extension used for <xref href=\"Bundles.Nodes.Bundle\" data-throw-if-not-resolved=\"false\"></xref>s\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("BundleExtension")]

          [DefaultOption("BundleExtension", ".bundle")]

          public class BundleExtension : BundleOption, IXmlSerializable
        VB: >-
          <BundleElement("BundleExtension")>

          <DefaultOption("BundleExtension", ".bundle")>

          Public Class BundleExtension

              Inherits BundleOption

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    - Bundles.Nodes.BundleOption
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: BundleExtension
    - type: Bundles.DefaultOptionAttribute
      ctor: Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: BundleExtension
      - type: System.String
        value: .bundle
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.BundleExtension.Value
      commentId: P:Bundles.Nodes.BundleExtension.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: BundleExtension.Value
        VB: BundleExtension.Value
      qualifiedName:
        CSharp: Bundles.Nodes.BundleExtension.Value
        VB: Bundles.Nodes.BundleExtension.Value
      type: Property
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleExtension.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: Value
        path: ../src/nodes/options/BundleExtension.cs
        startLine: 13
      example: []
      syntax:
        content:
          CSharp: public override string Value { get; set; }
          VB: Public Overrides Property Value As String
        parameters: []
        return:
          type: System.String
      overload: Bundles.Nodes.BundleExtension.Value*
      overridden: Bundles.BundleNode.Value
      modifiers:
        CSharp:
        - public
        - override
        - get
        - set
        VB:
        - Public
        - Overrides
    - id: Bundles.Nodes.BundleExtension.BuildAttributes(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.BundleExtension.BuildAttributes(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildAttributes(XmlNode)
        VB: BuildAttributes(XmlNode)
      nameWithType:
        CSharp: BundleExtension.BuildAttributes(XmlNode)
        VB: BundleExtension.BuildAttributes(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleExtension.BuildAttributes(System.Xml.XmlNode)
        VB: Bundles.Nodes.BundleExtension.BuildAttributes(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleExtension.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildAttributes
        path: ../src/nodes/options/BundleExtension.cs
        startLine: 20
      example: []
      syntax:
        content:
          CSharp: protected override void BuildAttributes(XmlNode node)
          VB: Protected Overrides Sub BuildAttributes(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.BundleExtension.BuildAttributes*
      overridden: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      Bundles.Nodes.Bundle: 
  - id: Bundles.Nodes.BundleOption
    commentId: T:Bundles.Nodes.BundleOption
    language: CSharp
    name:
      CSharp: BundleOption
      VB: BundleOption
    nameWithType:
      CSharp: BundleOption
      VB: BundleOption
    qualifiedName:
      CSharp: Bundles.Nodes.BundleOption
      VB: Bundles.Nodes.BundleOption
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/options/BundleOption.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: BundleOption
      path: ../src/nodes/options/BundleOption.cs
      startLine: 8
    summary: "\nRepresents an optional parameter used by a <xref href=\"Bundles.Bundler\" data-throw-if-not-resolved=\"false\"></xref>\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("Option")]

          public class BundleOption : BundleNode, IXmlSerializable
        VB: >-
          <BundleElement("Option")>

          Public Class BundleOption

              Inherits BundleNode

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: Option
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildNode(XmlNode)
        VB: BuildNode(XmlNode)
      nameWithType:
        CSharp: BundleOption.BuildNode(XmlNode)
        VB: BundleOption.BuildNode(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
        VB: Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/BundleOption.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildNode
        path: ../src/nodes/options/BundleOption.cs
        startLine: 12
      example: []
      syntax:
        content:
          CSharp: protected override void BuildNode(XmlNode node)
          VB: Protected Overrides Sub BuildNode(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.BundleOption.BuildNode*
      overridden: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      Bundles.Bundler: 
  - id: Bundles.Nodes.GenerateEmptyFolders
    commentId: T:Bundles.Nodes.GenerateEmptyFolders
    language: CSharp
    name:
      CSharp: GenerateEmptyFolders
      VB: GenerateEmptyFolders
    nameWithType:
      CSharp: GenerateEmptyFolders
      VB: GenerateEmptyFolders
    qualifiedName:
      CSharp: Bundles.Nodes.GenerateEmptyFolders
      VB: Bundles.Nodes.GenerateEmptyFolders
    type: Class
    assemblies:
    - bundle
    namespace: Bundles.Nodes
    source:
      remote:
        path: src/nodes/options/GenerateEmptyFolders.cs
        branch: main
        repo: git@bitbucket.org:citrus-thunder/bundle
      id: GenerateEmptyFolders
      path: ../src/nodes/options/GenerateEmptyFolders.cs
      startLine: 9
    summary: "\nOption defining whether <xref href=\"Bundles.Nodes.Folder\" data-throw-if-not-resolved=\"false\"></xref>s automatically create\ntheir filesystem entities when instantiated\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [BundleElement("GenerateEmptyFolders")]

          [DefaultOption("GenerateEmptyFolders", "false")]

          public class GenerateEmptyFolders : BundleOption, IXmlSerializable
        VB: >-
          <BundleElement("GenerateEmptyFolders")>

          <DefaultOption("GenerateEmptyFolders", "false")>

          Public Class GenerateEmptyFolders

              Inherits BundleOption

              Implements IXmlSerializable
    inheritance:
    - System.Object
    - Bundles.BundleNode
    - Bundles.Nodes.BundleOption
    implements:
    - System.Xml.Serialization.IXmlSerializable
    inheritedMembers:
    - Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
    - Bundles.BundleNode.NodeTypes
    - Bundles.BundleNode.Item(System.String)
    - Bundles.BundleNode.ElementName
    - Bundles.BundleNode.Name
    - Bundles.BundleNode.Value
    - Bundles.BundleNode.Values
    - Bundles.BundleNode.NodePath
    - Bundles.BundleNode.SkipWrite
    - Bundles.BundleNode.Attributes
    - Bundles.BundleNode.Nodes
    - Bundles.BundleNode.Parent
    - Bundles.BundleNode.Bundler
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
    - Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
    - Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
    - Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
    - Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
    - Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
    - Bundles.BundleNode.Attach(Bundles.BundleNode)
    - Bundles.BundleNode.AddChild(Bundles.BundleNode)
    - Bundles.BundleNode.AddNode(System.Xml.XmlNode)
    - Bundles.BundleNode.AddNode(Bundles.BundleNode)
    - Bundles.BundleNode.Merge(Bundles.BundleNode)
    - Bundles.BundleNode.Build(System.Xml.XmlNode)
    - Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
    - Bundles.BundleNode.AddField(System.String,System.String)
    - Bundles.BundleNode.GetChildNode(System.String)
    - Bundles.BundleNode.Get(System.String)
    - Bundles.BundleNode.Get``1(System.String)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: Bundles.BundleElementAttribute
      ctor: Bundles.BundleElementAttribute.#ctor(System.String)
      arguments:
      - type: System.String
        value: GenerateEmptyFolders
    - type: Bundles.DefaultOptionAttribute
      ctor: Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)
      arguments:
      - type: System.String
        value: GenerateEmptyFolders
      - type: System.String
        value: "false"
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes(System.Xml.XmlNode)
      commentId: M:Bundles.Nodes.GenerateEmptyFolders.BuildAttributes(System.Xml.XmlNode)
      language: CSharp
      name:
        CSharp: BuildAttributes(XmlNode)
        VB: BuildAttributes(XmlNode)
      nameWithType:
        CSharp: GenerateEmptyFolders.BuildAttributes(XmlNode)
        VB: GenerateEmptyFolders.BuildAttributes(XmlNode)
      qualifiedName:
        CSharp: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes(System.Xml.XmlNode)
        VB: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes(System.Xml.XmlNode)
      type: Method
      assemblies:
      - bundle
      namespace: Bundles.Nodes
      source:
        remote:
          path: src/nodes/options/GenerateEmptyFolders.cs
          branch: main
          repo: git@bitbucket.org:citrus-thunder/bundle
        id: BuildAttributes
        path: ../src/nodes/options/GenerateEmptyFolders.cs
        startLine: 14
      example: []
      syntax:
        content:
          CSharp: protected override void BuildAttributes(XmlNode node)
          VB: Protected Overrides Sub BuildAttributes(node As XmlNode)
        parameters:
        - id: node
          type: System.Xml.XmlNode
      overload: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes*
      overridden: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    references:
      Bundles.Nodes.Folder: 
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Attribute:
    name:
      CSharp:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
      VB:
      - id: System.Attribute
        name: Attribute
        nameWithType: Attribute
        qualifiedName: System.Attribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Attribute
  System.Attribute.Equals(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Equals(System.Object)
        name: Equals
        nameWithType: Attribute.Equals
        qualifiedName: System.Attribute.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Equals(System.Object)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttribute
        nameWithType: Attribute.GetCustomAttribute
        qualifiedName: System.Attribute.GetCustomAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: GetCustomAttributes
        nameWithType: Attribute.GetCustomAttributes
        qualifiedName: System.Attribute.GetCustomAttributes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.GetHashCode:
    name:
      CSharp:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.GetHashCode
        name: GetHashCode
        nameWithType: Attribute.GetHashCode
        qualifiedName: System.Attribute.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.GetHashCode
  System.Attribute.IsDefaultAttribute:
    name:
      CSharp:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefaultAttribute
        name: IsDefaultAttribute
        nameWithType: Attribute.IsDefaultAttribute
        qualifiedName: System.Attribute.IsDefaultAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefaultAttribute
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.MemberInfo
        name: MemberInfo
        nameWithType: MemberInfo
        qualifiedName: System.Reflection.MemberInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.Module
        name: Module
        nameWithType: Module
        qualifiedName: System.Reflection.Module
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean):
    name:
      CSharp:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
        name: IsDefined
        nameWithType: Attribute.IsDefined
        qualifiedName: System.Attribute.IsDefined
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Reflection.ParameterInfo
        name: ParameterInfo
        nameWithType: ParameterInfo
        qualifiedName: System.Reflection.ParameterInfo
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  System.Attribute.Match(System.Object):
    name:
      CSharp:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Attribute.Match(System.Object)
        name: Match
        nameWithType: Attribute.Match
        qualifiedName: System.Attribute.Match
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Attribute
    commentId: M:System.Attribute.Match(System.Object)
  System.Attribute.TypeId:
    name:
      CSharp:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
      VB:
      - id: System.Attribute.TypeId
        name: TypeId
        nameWithType: Attribute.TypeId
        qualifiedName: System.Attribute.TypeId
        isExternal: true
    isDefinition: true
    parent: System.Attribute
    commentId: P:System.Attribute.TypeId
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Bundles.BundleElementAttribute.#ctor*:
    name:
      CSharp:
      - id: Bundles.BundleElementAttribute.#ctor*
        name: BundleElementAttribute
        nameWithType: BundleElementAttribute.BundleElementAttribute
        qualifiedName: Bundles.BundleElementAttribute.BundleElementAttribute
      VB:
      - id: Bundles.BundleElementAttribute.#ctor*
        name: BundleElementAttribute
        nameWithType: BundleElementAttribute.BundleElementAttribute
        qualifiedName: Bundles.BundleElementAttribute.BundleElementAttribute
    isDefinition: true
    commentId: Overload:Bundles.BundleElementAttribute.#ctor
  Bundles.BundleElementAttribute.ElementName*:
    name:
      CSharp:
      - id: Bundles.BundleElementAttribute.ElementName*
        name: ElementName
        nameWithType: BundleElementAttribute.ElementName
        qualifiedName: Bundles.BundleElementAttribute.ElementName
      VB:
      - id: Bundles.BundleElementAttribute.ElementName*
        name: ElementName
        nameWithType: BundleElementAttribute.ElementName
        qualifiedName: Bundles.BundleElementAttribute.ElementName
    isDefinition: true
    commentId: Overload:Bundles.BundleElementAttribute.ElementName
  Bundles.BundleElementAttribute:
    name:
      CSharp:
      - id: Bundles.BundleElementAttribute
        name: BundleElementAttribute
        nameWithType: BundleElementAttribute
        qualifiedName: Bundles.BundleElementAttribute
      VB:
      - id: Bundles.BundleElementAttribute
        name: BundleElementAttribute
        nameWithType: BundleElementAttribute
        qualifiedName: Bundles.BundleElementAttribute
    isDefinition: true
    parent: Bundles
    commentId: T:Bundles.BundleElementAttribute
  System.AttributeUsageAttribute:
    name:
      CSharp:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
      VB:
      - id: System.AttributeUsageAttribute
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeUsageAttribute
  System.AttributeUsageAttribute.#ctor(System.AttributeTargets):
    name:
      CSharp:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
        name: AttributeUsageAttribute
        nameWithType: AttributeUsageAttribute.AttributeUsageAttribute
        qualifiedName: System.AttributeUsageAttribute.AttributeUsageAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.AttributeUsageAttribute
    commentId: M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
  System.AttributeTargets:
    name:
      CSharp:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
      VB:
      - id: System.AttributeTargets
        name: AttributeTargets
        nameWithType: AttributeTargets
        qualifiedName: System.AttributeTargets
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.AttributeTargets
  Bundles.DefaultOptionAttribute.#ctor*:
    name:
      CSharp:
      - id: Bundles.DefaultOptionAttribute.#ctor*
        name: DefaultOptionAttribute
        nameWithType: DefaultOptionAttribute.DefaultOptionAttribute
        qualifiedName: Bundles.DefaultOptionAttribute.DefaultOptionAttribute
      VB:
      - id: Bundles.DefaultOptionAttribute.#ctor*
        name: DefaultOptionAttribute
        nameWithType: DefaultOptionAttribute.DefaultOptionAttribute
        qualifiedName: Bundles.DefaultOptionAttribute.DefaultOptionAttribute
    isDefinition: true
    commentId: Overload:Bundles.DefaultOptionAttribute.#ctor
  Bundles.DefaultOptionAttribute.Name*:
    name:
      CSharp:
      - id: Bundles.DefaultOptionAttribute.Name*
        name: Name
        nameWithType: DefaultOptionAttribute.Name
        qualifiedName: Bundles.DefaultOptionAttribute.Name
      VB:
      - id: Bundles.DefaultOptionAttribute.Name*
        name: Name
        nameWithType: DefaultOptionAttribute.Name
        qualifiedName: Bundles.DefaultOptionAttribute.Name
    isDefinition: true
    commentId: Overload:Bundles.DefaultOptionAttribute.Name
  Bundles.DefaultOptionAttribute.DefaultValue*:
    name:
      CSharp:
      - id: Bundles.DefaultOptionAttribute.DefaultValue*
        name: DefaultValue
        nameWithType: DefaultOptionAttribute.DefaultValue
        qualifiedName: Bundles.DefaultOptionAttribute.DefaultValue
      VB:
      - id: Bundles.DefaultOptionAttribute.DefaultValue*
        name: DefaultValue
        nameWithType: DefaultOptionAttribute.DefaultValue
        qualifiedName: Bundles.DefaultOptionAttribute.DefaultValue
    isDefinition: true
    commentId: Overload:Bundles.DefaultOptionAttribute.DefaultValue
  Bundles.DefaultOptionAttribute:
    name:
      CSharp:
      - id: Bundles.DefaultOptionAttribute
        name: DefaultOptionAttribute
        nameWithType: DefaultOptionAttribute
        qualifiedName: Bundles.DefaultOptionAttribute
      VB:
      - id: Bundles.DefaultOptionAttribute
        name: DefaultOptionAttribute
        nameWithType: DefaultOptionAttribute
        qualifiedName: Bundles.DefaultOptionAttribute
    isDefinition: true
    parent: Bundles
    commentId: T:Bundles.DefaultOptionAttribute
  Bundles.FieldNameAttribute.#ctor*:
    name:
      CSharp:
      - id: Bundles.FieldNameAttribute.#ctor*
        name: FieldNameAttribute
        nameWithType: FieldNameAttribute.FieldNameAttribute
        qualifiedName: Bundles.FieldNameAttribute.FieldNameAttribute
      VB:
      - id: Bundles.FieldNameAttribute.#ctor*
        name: FieldNameAttribute
        nameWithType: FieldNameAttribute.FieldNameAttribute
        qualifiedName: Bundles.FieldNameAttribute.FieldNameAttribute
    isDefinition: true
    commentId: Overload:Bundles.FieldNameAttribute.#ctor
  Bundles.FieldNameAttribute.Name*:
    name:
      CSharp:
      - id: Bundles.FieldNameAttribute.Name*
        name: Name
        nameWithType: FieldNameAttribute.Name
        qualifiedName: Bundles.FieldNameAttribute.Name
      VB:
      - id: Bundles.FieldNameAttribute.Name*
        name: Name
        nameWithType: FieldNameAttribute.Name
        qualifiedName: Bundles.FieldNameAttribute.Name
    isDefinition: true
    commentId: Overload:Bundles.FieldNameAttribute.Name
  Bundles.FieldNameAttribute:
    name:
      CSharp:
      - id: Bundles.FieldNameAttribute
        name: FieldNameAttribute
        nameWithType: FieldNameAttribute
        qualifiedName: Bundles.FieldNameAttribute
      VB:
      - id: Bundles.FieldNameAttribute
        name: FieldNameAttribute
        nameWithType: FieldNameAttribute
        qualifiedName: Bundles.FieldNameAttribute
    isDefinition: true
    commentId: T:Bundles.FieldNameAttribute
  Bundles.Nodes.FieldNode:
    name:
      CSharp:
      - id: Bundles.Nodes.FieldNode
        name: FieldNode
        nameWithType: FieldNode
        qualifiedName: Bundles.Nodes.FieldNode
      VB:
      - id: Bundles.Nodes.FieldNode
        name: FieldNode
        nameWithType: FieldNode
        qualifiedName: Bundles.Nodes.FieldNode
    isDefinition: true
    parent: Bundles.Nodes
    commentId: T:Bundles.Nodes.FieldNode
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  Bundles:
    name:
      CSharp:
      - name: Bundles
        nameWithType: Bundles
        qualifiedName: Bundles
      VB:
      - name: Bundles
        nameWithType: Bundles
        qualifiedName: Bundles
    isDefinition: true
    commentId: N:Bundles
  Bundles.BundleNode:
    name:
      CSharp:
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      VB:
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
    isDefinition: true
    parent: Bundles
    commentId: T:Bundles.BundleNode
  Bundles.BundleField.#ctor*:
    name:
      CSharp:
      - id: Bundles.BundleField.#ctor*
        name: BundleField
        nameWithType: BundleField.BundleField
        qualifiedName: Bundles.BundleField.BundleField
      VB:
      - id: Bundles.BundleField.#ctor*
        name: BundleField
        nameWithType: BundleField.BundleField
        qualifiedName: Bundles.BundleField.BundleField
    isDefinition: true
    commentId: Overload:Bundles.BundleField.#ctor
  Bundles.BundleField.Node*:
    name:
      CSharp:
      - id: Bundles.BundleField.Node*
        name: Node
        nameWithType: BundleField.Node
        qualifiedName: Bundles.BundleField.Node
      VB:
      - id: Bundles.BundleField.Node*
        name: Node
        nameWithType: BundleField.Node
        qualifiedName: Bundles.BundleField.Node
    isDefinition: true
    commentId: Overload:Bundles.BundleField.Node
  Bundles.BundleField.Name*:
    name:
      CSharp:
      - id: Bundles.BundleField.Name*
        name: Name
        nameWithType: BundleField.Name
        qualifiedName: Bundles.BundleField.Name
      VB:
      - id: Bundles.BundleField.Name*
        name: Name
        nameWithType: BundleField.Name
        qualifiedName: Bundles.BundleField.Name
    isDefinition: true
    commentId: Overload:Bundles.BundleField.Name
  Bundles.BundleField.Value*:
    name:
      CSharp:
      - id: Bundles.BundleField.Value*
        name: Value
        nameWithType: BundleField.Value
        qualifiedName: Bundles.BundleField.Value
      VB:
      - id: Bundles.BundleField.Value*
        name: Value
        nameWithType: BundleField.Value
        qualifiedName: Bundles.BundleField.Value
    isDefinition: true
    commentId: Overload:Bundles.BundleField.Value
  Bundles.BundleField:
    name:
      CSharp:
      - id: Bundles.BundleField
        name: BundleField
        nameWithType: BundleField
        qualifiedName: Bundles.BundleField
      VB:
      - id: Bundles.BundleField
        name: BundleField
        nameWithType: BundleField
        qualifiedName: Bundles.BundleField
    isDefinition: true
    commentId: T:Bundles.BundleField
  System.Xml:
    name:
      CSharp:
      - name: System.Xml
        nameWithType: System.Xml
        qualifiedName: System.Xml
        isExternal: true
      VB:
      - name: System.Xml
        nameWithType: System.Xml
        qualifiedName: System.Xml
    isDefinition: true
    commentId: N:System.Xml
  System.Xml.XmlDocument:
    name:
      CSharp:
      - id: System.Xml.XmlDocument
        name: XmlDocument
        nameWithType: XmlDocument
        qualifiedName: System.Xml.XmlDocument
        isExternal: true
      VB:
      - id: System.Xml.XmlDocument
        name: XmlDocument
        nameWithType: XmlDocument
        qualifiedName: System.Xml.XmlDocument
        isExternal: true
    isDefinition: true
    parent: System.Xml
    commentId: T:System.Xml.XmlDocument
  Bundles.Bundler.#ctor*:
    name:
      CSharp:
      - id: Bundles.Bundler.#ctor*
        name: Bundler
        nameWithType: Bundler.Bundler
        qualifiedName: Bundles.Bundler.Bundler
      VB:
      - id: Bundles.Bundler.#ctor*
        name: Bundler
        nameWithType: Bundler.Bundler
        qualifiedName: Bundles.Bundler.Bundler
    isDefinition: true
    commentId: Overload:Bundles.Bundler.#ctor
  System.Environment.SpecialFolder.ApplicationData:
    commentId: F:System.Environment.SpecialFolder.ApplicationData
  Bundles.Bundler.AppRoot*:
    name:
      CSharp:
      - id: Bundles.Bundler.AppRoot*
        name: AppRoot
        nameWithType: Bundler.AppRoot
        qualifiedName: Bundles.Bundler.AppRoot
      VB:
      - id: Bundles.Bundler.AppRoot*
        name: AppRoot
        nameWithType: Bundler.AppRoot
        qualifiedName: Bundles.Bundler.AppRoot
    isDefinition: true
    commentId: Overload:Bundles.Bundler.AppRoot
  Bundles.Bundler.AppRoot:
    commentId: P:Bundles.Bundler.AppRoot
  Bundles.Bundler.DataRoot:
    commentId: P:Bundles.Bundler.DataRoot
  Bundles.Bundler.DataRootFolder*:
    name:
      CSharp:
      - id: Bundles.Bundler.DataRootFolder*
        name: DataRootFolder
        nameWithType: Bundler.DataRootFolder
        qualifiedName: Bundles.Bundler.DataRootFolder
      VB:
      - id: Bundles.Bundler.DataRootFolder*
        name: DataRootFolder
        nameWithType: Bundler.DataRootFolder
        qualifiedName: Bundles.Bundler.DataRootFolder
    isDefinition: true
    commentId: Overload:Bundles.Bundler.DataRootFolder
  Bundles.Nodes.Bundle:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle
        name: Bundle
        nameWithType: Bundle
        qualifiedName: Bundles.Nodes.Bundle
      VB:
      - id: Bundles.Nodes.Bundle
        name: Bundle
        nameWithType: Bundle
        qualifiedName: Bundles.Nodes.Bundle
    isDefinition: true
    commentId: T:Bundles.Nodes.Bundle
  Bundles.Bundler.BundleFileExtension*:
    name:
      CSharp:
      - id: Bundles.Bundler.BundleFileExtension*
        name: BundleFileExtension
        nameWithType: Bundler.BundleFileExtension
        qualifiedName: Bundles.Bundler.BundleFileExtension
      VB:
      - id: Bundles.Bundler.BundleFileExtension*
        name: BundleFileExtension
        nameWithType: Bundler.BundleFileExtension
        qualifiedName: Bundles.Bundler.BundleFileExtension
    isDefinition: true
    commentId: Overload:Bundles.Bundler.BundleFileExtension
  Bundles.Bundler.DataRoot*:
    name:
      CSharp:
      - id: Bundles.Bundler.DataRoot*
        name: DataRoot
        nameWithType: Bundler.DataRoot
        qualifiedName: Bundles.Bundler.DataRoot
      VB:
      - id: Bundles.Bundler.DataRoot*
        name: DataRoot
        nameWithType: Bundler.DataRoot
        qualifiedName: Bundles.Bundler.DataRoot
    isDefinition: true
    commentId: Overload:Bundles.Bundler.DataRoot
  Bundles.Bundler.Data*:
    name:
      CSharp:
      - id: Bundles.Bundler.Data*
        name: Data
        nameWithType: Bundler.Data
        qualifiedName: Bundles.Bundler.Data
      VB:
      - id: Bundles.Bundler.Data*
        name: Data
        nameWithType: Bundler.Data
        qualifiedName: Bundles.Bundler.Data
    isDefinition: true
    commentId: Overload:Bundles.Bundler.Data
  Bundles.Bundler.Config*:
    name:
      CSharp:
      - id: Bundles.Bundler.Config*
        name: Config
        nameWithType: Bundler.Config
        qualifiedName: Bundles.Bundler.Config
      VB:
      - id: Bundles.Bundler.Config*
        name: Config
        nameWithType: Bundler.Config
        qualifiedName: Bundles.Bundler.Config
    isDefinition: true
    commentId: Overload:Bundles.Bundler.Config
  Bundles.BundleValues:
    name:
      CSharp:
      - id: Bundles.BundleValues
        name: BundleValues
        nameWithType: BundleValues
        qualifiedName: Bundles.BundleValues
      VB:
      - id: Bundles.BundleValues
        name: BundleValues
        nameWithType: BundleValues
        qualifiedName: Bundles.BundleValues
    isDefinition: true
    parent: Bundles
    commentId: T:Bundles.BundleValues
  Bundles.Bundler.Options*:
    name:
      CSharp:
      - id: Bundles.Bundler.Options*
        name: Options
        nameWithType: Bundler.Options
        qualifiedName: Bundles.Bundler.Options
      VB:
      - id: Bundles.Bundler.Options*
        name: Options
        nameWithType: Bundler.Options
        qualifiedName: Bundles.Bundler.Options
    isDefinition: true
    commentId: Overload:Bundles.Bundler.Options
  Bundles.BundleServiceContainer:
    name:
      CSharp:
      - id: Bundles.BundleServiceContainer
        name: BundleServiceContainer
        nameWithType: BundleServiceContainer
        qualifiedName: Bundles.BundleServiceContainer
      VB:
      - id: Bundles.BundleServiceContainer
        name: BundleServiceContainer
        nameWithType: BundleServiceContainer
        qualifiedName: Bundles.BundleServiceContainer
    isDefinition: true
    parent: Bundles
    commentId: T:Bundles.BundleServiceContainer
  Bundles.Bundler.Services*:
    name:
      CSharp:
      - id: Bundles.Bundler.Services*
        name: Services
        nameWithType: Bundler.Services
        qualifiedName: Bundles.Bundler.Services
      VB:
      - id: Bundles.Bundler.Services*
        name: Services
        nameWithType: Bundler.Services
        qualifiedName: Bundles.Bundler.Services
    isDefinition: true
    commentId: Overload:Bundles.Bundler.Services
  System.Xml.XmlNode:
    name:
      CSharp:
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      VB:
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
    isDefinition: true
    parent: System.Xml
    commentId: T:System.Xml.XmlNode
  Bundles.Bundler.Build*:
    name:
      CSharp:
      - id: Bundles.Bundler.Build*
        name: Build
        nameWithType: Bundler.Build
        qualifiedName: Bundles.Bundler.Build
      VB:
      - id: Bundles.Bundler.Build*
        name: Build
        nameWithType: Bundler.Build
        qualifiedName: Bundles.Bundler.Build
    isDefinition: true
    commentId: Overload:Bundles.Bundler.Build
  Bundles.Bundler:
    name:
      CSharp:
      - id: Bundles.Bundler
        name: Bundler
        nameWithType: Bundler
        qualifiedName: Bundles.Bundler
      VB:
      - id: Bundles.Bundler
        name: Bundler
        nameWithType: Bundler
        qualifiedName: Bundles.Bundler
    isDefinition: true
    parent: Bundles
    commentId: T:Bundles.Bundler
  System.IServiceProvider:
    name:
      CSharp:
      - id: System.IServiceProvider
        name: IServiceProvider
        nameWithType: IServiceProvider
        qualifiedName: System.IServiceProvider
        isExternal: true
      VB:
      - id: System.IServiceProvider
        name: IServiceProvider
        nameWithType: IServiceProvider
        qualifiedName: System.IServiceProvider
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IServiceProvider
  Bundles.BundleServiceContainer.AddService*:
    name:
      CSharp:
      - id: Bundles.BundleServiceContainer.AddService*
        name: AddService
        nameWithType: BundleServiceContainer.AddService
        qualifiedName: Bundles.BundleServiceContainer.AddService
      VB:
      - id: Bundles.BundleServiceContainer.AddService*
        name: AddService
        nameWithType: BundleServiceContainer.AddService
        qualifiedName: Bundles.BundleServiceContainer.AddService
    isDefinition: true
    commentId: Overload:Bundles.BundleServiceContainer.AddService
  System.Type:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Type
  Bundles.BundleServiceContainer.GetService*:
    name:
      CSharp:
      - id: Bundles.BundleServiceContainer.GetService*
        name: GetService
        nameWithType: BundleServiceContainer.GetService
        qualifiedName: Bundles.BundleServiceContainer.GetService
      VB:
      - id: Bundles.BundleServiceContainer.GetService*
        name: GetService
        nameWithType: BundleServiceContainer.GetService
        qualifiedName: Bundles.BundleServiceContainer.GetService
    isDefinition: true
    commentId: Overload:Bundles.BundleServiceContainer.GetService
  System.IServiceProvider.GetService(System.Type):
    name:
      CSharp:
      - id: System.IServiceProvider.GetService(System.Type)
        name: GetService
        nameWithType: IServiceProvider.GetService
        qualifiedName: System.IServiceProvider.GetService
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IServiceProvider.GetService(System.Type)
        name: GetService
        nameWithType: IServiceProvider.GetService
        qualifiedName: System.IServiceProvider.GetService
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IServiceProvider
    commentId: M:System.IServiceProvider.GetService(System.Type)
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Bundles.BundleServiceContainer.RemoveService*:
    name:
      CSharp:
      - id: Bundles.BundleServiceContainer.RemoveService*
        name: RemoveService
        nameWithType: BundleServiceContainer.RemoveService
        qualifiedName: Bundles.BundleServiceContainer.RemoveService
      VB:
      - id: Bundles.BundleServiceContainer.RemoveService*
        name: RemoveService
        nameWithType: BundleServiceContainer.RemoveService
        qualifiedName: Bundles.BundleServiceContainer.RemoveService
    isDefinition: true
    commentId: Overload:Bundles.BundleServiceContainer.RemoveService
  Bundles.BundleValues.#ctor*:
    name:
      CSharp:
      - id: Bundles.BundleValues.#ctor*
        name: BundleValues
        nameWithType: BundleValues.BundleValues
        qualifiedName: Bundles.BundleValues.BundleValues
      VB:
      - id: Bundles.BundleValues.#ctor*
        name: BundleValues
        nameWithType: BundleValues.BundleValues
        qualifiedName: Bundles.BundleValues.BundleValues
    isDefinition: true
    commentId: Overload:Bundles.BundleValues.#ctor
  Bundles.BundleValues.Node*:
    name:
      CSharp:
      - id: Bundles.BundleValues.Node*
        name: Node
        nameWithType: BundleValues.Node
        qualifiedName: Bundles.BundleValues.Node
      VB:
      - id: Bundles.BundleValues.Node*
        name: Node
        nameWithType: BundleValues.Node
        qualifiedName: Bundles.BundleValues.Node
    isDefinition: true
    commentId: Overload:Bundles.BundleValues.Node
  System.Collections.ObjectModel.ReadOnlyDictionary`2:
    name:
      CSharp:
      - id: System.Collections.ObjectModel.ReadOnlyDictionary`2
        name: ReadOnlyDictionary
        nameWithType: ReadOnlyDictionary
        qualifiedName: System.Collections.ObjectModel.ReadOnlyDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.ObjectModel.ReadOnlyDictionary`2
        name: ReadOnlyDictionary
        nameWithType: ReadOnlyDictionary
        qualifiedName: System.Collections.ObjectModel.ReadOnlyDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary`2
  System.Collections.ObjectModel:
    name:
      CSharp:
      - name: System.Collections.ObjectModel
        nameWithType: System.Collections.ObjectModel
        qualifiedName: System.Collections.ObjectModel
        isExternal: true
      VB:
      - name: System.Collections.ObjectModel
        nameWithType: System.Collections.ObjectModel
        qualifiedName: System.Collections.ObjectModel
    isDefinition: true
    commentId: N:System.Collections.ObjectModel
  System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.String}:
    name:
      CSharp:
      - id: System.Collections.ObjectModel.ReadOnlyDictionary`2
        name: ReadOnlyDictionary
        nameWithType: ReadOnlyDictionary
        qualifiedName: System.Collections.ObjectModel.ReadOnlyDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.ObjectModel.ReadOnlyDictionary`2
        name: ReadOnlyDictionary
        nameWithType: ReadOnlyDictionary
        qualifiedName: System.Collections.ObjectModel.ReadOnlyDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.ObjectModel.ReadOnlyDictionary`2
    parent: System.Collections.ObjectModel
    commentId: T:System.Collections.ObjectModel.ReadOnlyDictionary{System.String,System.String}
  Bundles.BundleValues.All*:
    name:
      CSharp:
      - id: Bundles.BundleValues.All*
        name: All
        nameWithType: BundleValues.All
        qualifiedName: Bundles.BundleValues.All
      VB:
      - id: Bundles.BundleValues.All*
        name: All
        nameWithType: BundleValues.All
        qualifiedName: Bundles.BundleValues.All
    isDefinition: true
    commentId: Overload:Bundles.BundleValues.All
  Bundles.BundleValues.Item*:
    name:
      CSharp:
      - id: Bundles.BundleValues.Item*
        name: Item
        nameWithType: BundleValues.Item
        qualifiedName: Bundles.BundleValues.Item
      VB:
      - id: Bundles.BundleValues.Item*
        name: Item
        nameWithType: BundleValues.Item
        qualifiedName: Bundles.BundleValues.Item
    isDefinition: true
    commentId: Overload:Bundles.BundleValues.Item
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Bundles.BundleValues.GetAll*:
    name:
      CSharp:
      - id: Bundles.BundleValues.GetAll*
        name: GetAll
        nameWithType: BundleValues.GetAll
        qualifiedName: Bundles.BundleValues.GetAll
      VB:
      - id: Bundles.BundleValues.GetAll*
        name: GetAll
        nameWithType: BundleValues.GetAll
        qualifiedName: Bundles.BundleValues.GetAll
    isDefinition: true
    commentId: Overload:Bundles.BundleValues.GetAll
  Bundles.Extensions.ToPath*:
    name:
      CSharp:
      - id: Bundles.Extensions.ToPath*
        name: ToPath
        nameWithType: Extensions.ToPath
        qualifiedName: Bundles.Extensions.ToPath
      VB:
      - id: Bundles.Extensions.ToPath*
        name: ToPath
        nameWithType: Extensions.ToPath
        qualifiedName: Bundles.Extensions.ToPath
    isDefinition: true
    commentId: Overload:Bundles.Extensions.ToPath
  Bundles.Extensions:
    name:
      CSharp:
      - id: Bundles.Extensions
        name: Extensions
        nameWithType: Extensions
        qualifiedName: Bundles.Extensions
      VB:
      - id: Bundles.Extensions
        name: Extensions
        nameWithType: Extensions
        qualifiedName: Bundles.Extensions
    isDefinition: true
    commentId: T:Bundles.Extensions
  Bundles.BundleNode.Bundler:
    name:
      CSharp:
      - id: Bundles.BundleNode.Bundler
        name: Bundler
        nameWithType: BundleNode.Bundler
        qualifiedName: Bundles.BundleNode.Bundler
      VB:
      - id: Bundles.BundleNode.Bundler
        name: Bundler
        nameWithType: BundleNode.Bundler
        qualifiedName: Bundles.BundleNode.Bundler
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Bundler
  System.Xml.Serialization:
    name:
      CSharp:
      - name: System.Xml.Serialization
        nameWithType: System.Xml.Serialization
        qualifiedName: System.Xml.Serialization
        isExternal: true
      VB:
      - name: System.Xml.Serialization
        nameWithType: System.Xml.Serialization
        qualifiedName: System.Xml.Serialization
    isDefinition: true
    commentId: N:System.Xml.Serialization
  System.Xml.Serialization.IXmlSerializable:
    name:
      CSharp:
      - id: System.Xml.Serialization.IXmlSerializable
        name: IXmlSerializable
        nameWithType: IXmlSerializable
        qualifiedName: System.Xml.Serialization.IXmlSerializable
        isExternal: true
      VB:
      - id: System.Xml.Serialization.IXmlSerializable
        name: IXmlSerializable
        nameWithType: IXmlSerializable
        qualifiedName: System.Xml.Serialization.IXmlSerializable
        isExternal: true
    isDefinition: true
    parent: System.Xml.Serialization
    commentId: T:System.Xml.Serialization.IXmlSerializable
  System.Collections.Generic.Dictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.Dictionary`2
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.Dictionary{System.String,System.Type}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.Type}
  Bundles.BundleNode.Item*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Item*
        name: Item
        nameWithType: BundleNode.Item
        qualifiedName: Bundles.BundleNode.Item
      VB:
      - id: Bundles.BundleNode.Item*
        name: Item
        nameWithType: BundleNode.Item
        qualifiedName: Bundles.BundleNode.Item
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Item
  Bundles.BundleNode.ElementName*:
    name:
      CSharp:
      - id: Bundles.BundleNode.ElementName*
        name: ElementName
        nameWithType: BundleNode.ElementName
        qualifiedName: Bundles.BundleNode.ElementName
      VB:
      - id: Bundles.BundleNode.ElementName*
        name: ElementName
        nameWithType: BundleNode.ElementName
        qualifiedName: Bundles.BundleNode.ElementName
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.ElementName
  Bundles.BundleNode.Name*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Name*
        name: Name
        nameWithType: BundleNode.Name
        qualifiedName: Bundles.BundleNode.Name
      VB:
      - id: Bundles.BundleNode.Name*
        name: Name
        nameWithType: BundleNode.Name
        qualifiedName: Bundles.BundleNode.Name
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Name
  Bundles.BundleNode.Value*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Value*
        name: Value
        nameWithType: BundleNode.Value
        qualifiedName: Bundles.BundleNode.Value
      VB:
      - id: Bundles.BundleNode.Value*
        name: Value
        nameWithType: BundleNode.Value
        qualifiedName: Bundles.BundleNode.Value
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Value
  Bundles.BundleNode.Values*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Values*
        name: Values
        nameWithType: BundleNode.Values
        qualifiedName: Bundles.BundleNode.Values
      VB:
      - id: Bundles.BundleNode.Values*
        name: Values
        nameWithType: BundleNode.Values
        qualifiedName: Bundles.BundleNode.Values
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Values
  Bundles.BundleNode.NodePath*:
    name:
      CSharp:
      - id: Bundles.BundleNode.NodePath*
        name: NodePath
        nameWithType: BundleNode.NodePath
        qualifiedName: Bundles.BundleNode.NodePath
      VB:
      - id: Bundles.BundleNode.NodePath*
        name: NodePath
        nameWithType: BundleNode.NodePath
        qualifiedName: Bundles.BundleNode.NodePath
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.NodePath
  Bundles.BundleNode.SkipWrite*:
    name:
      CSharp:
      - id: Bundles.BundleNode.SkipWrite*
        name: SkipWrite
        nameWithType: BundleNode.SkipWrite
        qualifiedName: Bundles.BundleNode.SkipWrite
      VB:
      - id: Bundles.BundleNode.SkipWrite*
        name: SkipWrite
        nameWithType: BundleNode.SkipWrite
        qualifiedName: Bundles.BundleNode.SkipWrite
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.SkipWrite
  System.Collections.Generic.Dictionary{System.String,System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  Bundles.BundleNode.Attributes*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Attributes*
        name: Attributes
        nameWithType: BundleNode.Attributes
        qualifiedName: Bundles.BundleNode.Attributes
      VB:
      - id: Bundles.BundleNode.Attributes*
        name: Attributes
        nameWithType: BundleNode.Attributes
        qualifiedName: Bundles.BundleNode.Attributes
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Attributes
  System.Collections.Generic.Dictionary{System.String,Bundles.BundleNode}:
    name:
      CSharp:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.Dictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.Dictionary{System.String,Bundles.BundleNode}
  Bundles.BundleNode.Nodes*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Nodes*
        name: Nodes
        nameWithType: BundleNode.Nodes
        qualifiedName: Bundles.BundleNode.Nodes
      VB:
      - id: Bundles.BundleNode.Nodes*
        name: Nodes
        nameWithType: BundleNode.Nodes
        qualifiedName: Bundles.BundleNode.Nodes
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Nodes
  Bundles.BundleNode.Parent*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Parent*
        name: Parent
        nameWithType: BundleNode.Parent
        qualifiedName: Bundles.BundleNode.Parent
      VB:
      - id: Bundles.BundleNode.Parent*
        name: Parent
        nameWithType: BundleNode.Parent
        qualifiedName: Bundles.BundleNode.Parent
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Parent
  Bundles.BundleNode.Bundler*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Bundler*
        name: Bundler
        nameWithType: BundleNode.Bundler
        qualifiedName: Bundles.BundleNode.Bundler
      VB:
      - id: Bundles.BundleNode.Bundler*
        name: Bundler
        nameWithType: BundleNode.Bundler
        qualifiedName: Bundles.BundleNode.Bundler
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Bundler
  System.Xml.XmlReader:
    name:
      CSharp:
      - id: System.Xml.XmlReader
        name: XmlReader
        nameWithType: XmlReader
        qualifiedName: System.Xml.XmlReader
        isExternal: true
      VB:
      - id: System.Xml.XmlReader
        name: XmlReader
        nameWithType: XmlReader
        qualifiedName: System.Xml.XmlReader
        isExternal: true
    isDefinition: true
    parent: System.Xml
    commentId: T:System.Xml.XmlReader
  Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml*:
    name:
      CSharp:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml*
        name: IXmlSerializable.ReadXml
        nameWithType: BundleNode.IXmlSerializable.ReadXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml
      VB:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml*
        name: System.Xml.Serialization.IXmlSerializable.ReadXml
        nameWithType: BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml
  System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader):
    name:
      CSharp:
      - id: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
        name: ReadXml
        nameWithType: IXmlSerializable.ReadXml
        qualifiedName: System.Xml.Serialization.IXmlSerializable.ReadXml
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlReader
        name: XmlReader
        nameWithType: XmlReader
        qualifiedName: System.Xml.XmlReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
        name: ReadXml
        nameWithType: IXmlSerializable.ReadXml
        qualifiedName: System.Xml.Serialization.IXmlSerializable.ReadXml
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlReader
        name: XmlReader
        nameWithType: XmlReader
        qualifiedName: System.Xml.XmlReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Xml.Serialization.IXmlSerializable
    commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  System.Xml.XmlWriter:
    name:
      CSharp:
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      VB:
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
    isDefinition: true
    parent: System.Xml
    commentId: T:System.Xml.XmlWriter
  Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml*:
    name:
      CSharp:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml*
        name: IXmlSerializable.WriteXml
        nameWithType: BundleNode.IXmlSerializable.WriteXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml
      VB:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml*
        name: System.Xml.Serialization.IXmlSerializable.WriteXml
        nameWithType: BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml
  System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter):
    name:
      CSharp:
      - id: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
        name: WriteXml
        nameWithType: IXmlSerializable.WriteXml
        qualifiedName: System.Xml.Serialization.IXmlSerializable.WriteXml
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
        name: WriteXml
        nameWithType: IXmlSerializable.WriteXml
        qualifiedName: System.Xml.Serialization.IXmlSerializable.WriteXml
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Xml.Serialization.IXmlSerializable
    commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  Bundles.BundleNode.ReadXmlAttributes*:
    name:
      CSharp:
      - id: Bundles.BundleNode.ReadXmlAttributes*
        name: ReadXmlAttributes
        nameWithType: BundleNode.ReadXmlAttributes
        qualifiedName: Bundles.BundleNode.ReadXmlAttributes
      VB:
      - id: Bundles.BundleNode.ReadXmlAttributes*
        name: ReadXmlAttributes
        nameWithType: BundleNode.ReadXmlAttributes
        qualifiedName: Bundles.BundleNode.ReadXmlAttributes
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.ReadXmlAttributes
  Bundles.BundleNode.ReadXmlContent*:
    name:
      CSharp:
      - id: Bundles.BundleNode.ReadXmlContent*
        name: ReadXmlContent
        nameWithType: BundleNode.ReadXmlContent
        qualifiedName: Bundles.BundleNode.ReadXmlContent
      VB:
      - id: Bundles.BundleNode.ReadXmlContent*
        name: ReadXmlContent
        nameWithType: BundleNode.ReadXmlContent
        qualifiedName: Bundles.BundleNode.ReadXmlContent
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.ReadXmlContent
  Bundles.BundleNode.WriteXmlAttributes*:
    name:
      CSharp:
      - id: Bundles.BundleNode.WriteXmlAttributes*
        name: WriteXmlAttributes
        nameWithType: BundleNode.WriteXmlAttributes
        qualifiedName: Bundles.BundleNode.WriteXmlAttributes
      VB:
      - id: Bundles.BundleNode.WriteXmlAttributes*
        name: WriteXmlAttributes
        nameWithType: BundleNode.WriteXmlAttributes
        qualifiedName: Bundles.BundleNode.WriteXmlAttributes
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.WriteXmlAttributes
  Bundles.BundleNode.WriteXmlContent*:
    name:
      CSharp:
      - id: Bundles.BundleNode.WriteXmlContent*
        name: WriteXmlContent
        nameWithType: BundleNode.WriteXmlContent
        qualifiedName: Bundles.BundleNode.WriteXmlContent
      VB:
      - id: Bundles.BundleNode.WriteXmlContent*
        name: WriteXmlContent
        nameWithType: BundleNode.WriteXmlContent
        qualifiedName: Bundles.BundleNode.WriteXmlContent
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.WriteXmlContent
  Bundles.BundleNode.Attach*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Attach*
        name: Attach
        nameWithType: BundleNode.Attach
        qualifiedName: Bundles.BundleNode.Attach
      VB:
      - id: Bundles.BundleNode.Attach*
        name: Attach
        nameWithType: BundleNode.Attach
        qualifiedName: Bundles.BundleNode.Attach
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Attach
  Bundles.BundleNode.AddChild*:
    name:
      CSharp:
      - id: Bundles.BundleNode.AddChild*
        name: AddChild
        nameWithType: BundleNode.AddChild
        qualifiedName: Bundles.BundleNode.AddChild
      VB:
      - id: Bundles.BundleNode.AddChild*
        name: AddChild
        nameWithType: BundleNode.AddChild
        qualifiedName: Bundles.BundleNode.AddChild
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.AddChild
  Bundles.BundleNode.AddNode*:
    name:
      CSharp:
      - id: Bundles.BundleNode.AddNode*
        name: AddNode
        nameWithType: BundleNode.AddNode
        qualifiedName: Bundles.BundleNode.AddNode
      VB:
      - id: Bundles.BundleNode.AddNode*
        name: AddNode
        nameWithType: BundleNode.AddNode
        qualifiedName: Bundles.BundleNode.AddNode
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.AddNode
  Bundles.BundleNode.Merge*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Merge*
        name: Merge
        nameWithType: BundleNode.Merge
        qualifiedName: Bundles.BundleNode.Merge
      VB:
      - id: Bundles.BundleNode.Merge*
        name: Merge
        nameWithType: BundleNode.Merge
        qualifiedName: Bundles.BundleNode.Merge
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Merge
  Bundles.BundleNode.Build*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Build*
        name: Build
        nameWithType: BundleNode.Build
        qualifiedName: Bundles.BundleNode.Build
      VB:
      - id: Bundles.BundleNode.Build*
        name: Build
        nameWithType: BundleNode.Build
        qualifiedName: Bundles.BundleNode.Build
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Build
  Bundles.BundleNode.BuildAttributes*:
    name:
      CSharp:
      - id: Bundles.BundleNode.BuildAttributes*
        name: BuildAttributes
        nameWithType: BundleNode.BuildAttributes
        qualifiedName: Bundles.BundleNode.BuildAttributes
      VB:
      - id: Bundles.BundleNode.BuildAttributes*
        name: BuildAttributes
        nameWithType: BundleNode.BuildAttributes
        qualifiedName: Bundles.BundleNode.BuildAttributes
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.BuildAttributes
  Bundles.BundleNode.BuildNode*:
    name:
      CSharp:
      - id: Bundles.BundleNode.BuildNode*
        name: BuildNode
        nameWithType: BundleNode.BuildNode
        qualifiedName: Bundles.BundleNode.BuildNode
      VB:
      - id: Bundles.BundleNode.BuildNode*
        name: BuildNode
        nameWithType: BundleNode.BuildNode
        qualifiedName: Bundles.BundleNode.BuildNode
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.BuildNode
  Bundles.BundleNode.BuildChildren*:
    name:
      CSharp:
      - id: Bundles.BundleNode.BuildChildren*
        name: BuildChildren
        nameWithType: BundleNode.BuildChildren
        qualifiedName: Bundles.BundleNode.BuildChildren
      VB:
      - id: Bundles.BundleNode.BuildChildren*
        name: BuildChildren
        nameWithType: BundleNode.BuildChildren
        qualifiedName: Bundles.BundleNode.BuildChildren
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.BuildChildren
  Bundles.Nodes:
    name:
      CSharp:
      - name: Bundles.Nodes
        nameWithType: Bundles.Nodes
        qualifiedName: Bundles.Nodes
      VB:
      - name: Bundles.Nodes
        nameWithType: Bundles.Nodes
        qualifiedName: Bundles.Nodes
    isDefinition: true
    commentId: N:Bundles.Nodes
  Bundles.BundleNode.AddField*:
    name:
      CSharp:
      - id: Bundles.BundleNode.AddField*
        name: AddField
        nameWithType: BundleNode.AddField
        qualifiedName: Bundles.BundleNode.AddField
      VB:
      - id: Bundles.BundleNode.AddField*
        name: AddField
        nameWithType: BundleNode.AddField
        qualifiedName: Bundles.BundleNode.AddField
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.AddField
  Bundles.BundleNode.GetChildNode*:
    name:
      CSharp:
      - id: Bundles.BundleNode.GetChildNode*
        name: GetChildNode
        nameWithType: BundleNode.GetChildNode
        qualifiedName: Bundles.BundleNode.GetChildNode
      VB:
      - id: Bundles.BundleNode.GetChildNode*
        name: GetChildNode
        nameWithType: BundleNode.GetChildNode
        qualifiedName: Bundles.BundleNode.GetChildNode
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.GetChildNode
  Bundles.BundleNode.Get*:
    name:
      CSharp:
      - id: Bundles.BundleNode.Get*
        name: Get
        nameWithType: BundleNode.Get
        qualifiedName: Bundles.BundleNode.Get
      VB:
      - id: Bundles.BundleNode.Get*
        name: Get
        nameWithType: BundleNode.Get
        qualifiedName: Bundles.BundleNode.Get
    isDefinition: true
    commentId: Overload:Bundles.BundleNode.Get
  Bundles.BundleNode.NodeTypes:
    name:
      CSharp:
      - id: Bundles.BundleNode.NodeTypes
        name: NodeTypes
        nameWithType: BundleNode.NodeTypes
        qualifiedName: Bundles.BundleNode.NodeTypes
      VB:
      - id: Bundles.BundleNode.NodeTypes
        name: NodeTypes
        nameWithType: BundleNode.NodeTypes
        qualifiedName: Bundles.BundleNode.NodeTypes
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: F:Bundles.BundleNode.NodeTypes
  Bundles.BundleNode.Item(System.String):
    name:
      CSharp:
      - id: Bundles.BundleNode.Item(System.String)
        name: Item
        nameWithType: BundleNode.Item
        qualifiedName: Bundles.BundleNode.Item
      - name: '['
        nameWithType: '['
        qualifiedName: '['
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ']'
        nameWithType: ']'
        qualifiedName: ']'
      VB:
      - id: Bundles.BundleNode.Item(System.String)
        name: Item
        nameWithType: BundleNode.Item
        qualifiedName: Bundles.BundleNode.Item
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Item(System.String)
  Bundles.BundleNode.ElementName:
    name:
      CSharp:
      - id: Bundles.BundleNode.ElementName
        name: ElementName
        nameWithType: BundleNode.ElementName
        qualifiedName: Bundles.BundleNode.ElementName
      VB:
      - id: Bundles.BundleNode.ElementName
        name: ElementName
        nameWithType: BundleNode.ElementName
        qualifiedName: Bundles.BundleNode.ElementName
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.ElementName
  Bundles.BundleNode.Name:
    name:
      CSharp:
      - id: Bundles.BundleNode.Name
        name: Name
        nameWithType: BundleNode.Name
        qualifiedName: Bundles.BundleNode.Name
      VB:
      - id: Bundles.BundleNode.Name
        name: Name
        nameWithType: BundleNode.Name
        qualifiedName: Bundles.BundleNode.Name
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Name
  Bundles.BundleNode.Value:
    name:
      CSharp:
      - id: Bundles.BundleNode.Value
        name: Value
        nameWithType: BundleNode.Value
        qualifiedName: Bundles.BundleNode.Value
      VB:
      - id: Bundles.BundleNode.Value
        name: Value
        nameWithType: BundleNode.Value
        qualifiedName: Bundles.BundleNode.Value
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Value
  Bundles.BundleNode.Values:
    name:
      CSharp:
      - id: Bundles.BundleNode.Values
        name: Values
        nameWithType: BundleNode.Values
        qualifiedName: Bundles.BundleNode.Values
      VB:
      - id: Bundles.BundleNode.Values
        name: Values
        nameWithType: BundleNode.Values
        qualifiedName: Bundles.BundleNode.Values
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Values
  Bundles.BundleNode.NodePath:
    name:
      CSharp:
      - id: Bundles.BundleNode.NodePath
        name: NodePath
        nameWithType: BundleNode.NodePath
        qualifiedName: Bundles.BundleNode.NodePath
      VB:
      - id: Bundles.BundleNode.NodePath
        name: NodePath
        nameWithType: BundleNode.NodePath
        qualifiedName: Bundles.BundleNode.NodePath
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.NodePath
  Bundles.BundleNode.SkipWrite:
    name:
      CSharp:
      - id: Bundles.BundleNode.SkipWrite
        name: SkipWrite
        nameWithType: BundleNode.SkipWrite
        qualifiedName: Bundles.BundleNode.SkipWrite
      VB:
      - id: Bundles.BundleNode.SkipWrite
        name: SkipWrite
        nameWithType: BundleNode.SkipWrite
        qualifiedName: Bundles.BundleNode.SkipWrite
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.SkipWrite
  Bundles.BundleNode.Attributes:
    name:
      CSharp:
      - id: Bundles.BundleNode.Attributes
        name: Attributes
        nameWithType: BundleNode.Attributes
        qualifiedName: Bundles.BundleNode.Attributes
      VB:
      - id: Bundles.BundleNode.Attributes
        name: Attributes
        nameWithType: BundleNode.Attributes
        qualifiedName: Bundles.BundleNode.Attributes
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Attributes
  Bundles.BundleNode.Nodes:
    name:
      CSharp:
      - id: Bundles.BundleNode.Nodes
        name: Nodes
        nameWithType: BundleNode.Nodes
        qualifiedName: Bundles.BundleNode.Nodes
      VB:
      - id: Bundles.BundleNode.Nodes
        name: Nodes
        nameWithType: BundleNode.Nodes
        qualifiedName: Bundles.BundleNode.Nodes
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Nodes
  Bundles.BundleNode.Parent:
    name:
      CSharp:
      - id: Bundles.BundleNode.Parent
        name: Parent
        nameWithType: BundleNode.Parent
        qualifiedName: Bundles.BundleNode.Parent
      VB:
      - id: Bundles.BundleNode.Parent
        name: Parent
        nameWithType: BundleNode.Parent
        qualifiedName: Bundles.BundleNode.Parent
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: P:Bundles.BundleNode.Parent
  Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader):
    name:
      CSharp:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
        name: IXmlSerializable.ReadXml
        nameWithType: BundleNode.IXmlSerializable.ReadXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlReader
        name: XmlReader
        nameWithType: XmlReader
        qualifiedName: System.Xml.XmlReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
        name: System.Xml.Serialization.IXmlSerializable.ReadXml
        nameWithType: BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.ReadXml
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlReader
        name: XmlReader
        nameWithType: XmlReader
        qualifiedName: System.Xml.XmlReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter):
    name:
      CSharp:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
        name: IXmlSerializable.WriteXml
        nameWithType: BundleNode.IXmlSerializable.WriteXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
        name: System.Xml.Serialization.IXmlSerializable.WriteXml
        nameWithType: BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml
        qualifiedName: Bundles.BundleNode.System.Xml.Serialization.IXmlSerializable.WriteXml
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
        name: ReadXmlAttributes
        nameWithType: BundleNode.ReadXmlAttributes
        qualifiedName: Bundles.BundleNode.ReadXmlAttributes
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
        name: ReadXmlAttributes
        nameWithType: BundleNode.ReadXmlAttributes
        qualifiedName: Bundles.BundleNode.ReadXmlAttributes
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)
  Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
        name: ReadXmlContent
        nameWithType: BundleNode.ReadXmlContent
        qualifiedName: Bundles.BundleNode.ReadXmlContent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
        name: ReadXmlContent
        nameWithType: BundleNode.ReadXmlContent
        qualifiedName: Bundles.BundleNode.ReadXmlContent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)
  Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter):
    name:
      CSharp:
      - id: Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
        name: WriteXmlContent
        nameWithType: BundleNode.WriteXmlContent
        qualifiedName: Bundles.BundleNode.WriteXmlContent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
        name: WriteXmlContent
        nameWithType: BundleNode.WriteXmlContent
        qualifiedName: Bundles.BundleNode.WriteXmlContent
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)
  Bundles.BundleNode.AddChild(Bundles.BundleNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.AddChild(Bundles.BundleNode)
        name: AddChild
        nameWithType: BundleNode.AddChild
        qualifiedName: Bundles.BundleNode.AddChild
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.AddChild(Bundles.BundleNode)
        name: AddChild
        nameWithType: BundleNode.AddChild
        qualifiedName: Bundles.BundleNode.AddChild
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.AddChild(Bundles.BundleNode)
  Bundles.BundleNode.AddNode(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.AddNode(System.Xml.XmlNode)
        name: AddNode
        nameWithType: BundleNode.AddNode
        qualifiedName: Bundles.BundleNode.AddNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.AddNode(System.Xml.XmlNode)
        name: AddNode
        nameWithType: BundleNode.AddNode
        qualifiedName: Bundles.BundleNode.AddNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.AddNode(System.Xml.XmlNode)
  Bundles.BundleNode.AddNode(Bundles.BundleNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.AddNode(Bundles.BundleNode)
        name: AddNode
        nameWithType: BundleNode.AddNode
        qualifiedName: Bundles.BundleNode.AddNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.AddNode(Bundles.BundleNode)
        name: AddNode
        nameWithType: BundleNode.AddNode
        qualifiedName: Bundles.BundleNode.AddNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.AddNode(Bundles.BundleNode)
  Bundles.BundleNode.Merge(Bundles.BundleNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.Merge(Bundles.BundleNode)
        name: Merge
        nameWithType: BundleNode.Merge
        qualifiedName: Bundles.BundleNode.Merge
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.Merge(Bundles.BundleNode)
        name: Merge
        nameWithType: BundleNode.Merge
        qualifiedName: Bundles.BundleNode.Merge
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.Merge(Bundles.BundleNode)
  Bundles.BundleNode.Build(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.Build(System.Xml.XmlNode)
        name: Build
        nameWithType: BundleNode.Build
        qualifiedName: Bundles.BundleNode.Build
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.Build(System.Xml.XmlNode)
        name: Build
        nameWithType: BundleNode.Build
        qualifiedName: Bundles.BundleNode.Build
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.Build(System.Xml.XmlNode)
  Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
        name: BuildAttributes
        nameWithType: BundleNode.BuildAttributes
        qualifiedName: Bundles.BundleNode.BuildAttributes
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
        name: BuildAttributes
        nameWithType: BundleNode.BuildAttributes
        qualifiedName: Bundles.BundleNode.BuildAttributes
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)
  Bundles.BundleNode.BuildNode(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
        name: BuildNode
        nameWithType: BundleNode.BuildNode
        qualifiedName: Bundles.BundleNode.BuildNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
        name: BuildNode
        nameWithType: BundleNode.BuildNode
        qualifiedName: Bundles.BundleNode.BuildNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.BuildNode(System.Xml.XmlNode)
  Bundles.BundleNode.BuildChildren(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
        name: BuildChildren
        nameWithType: BundleNode.BuildChildren
        qualifiedName: Bundles.BundleNode.BuildChildren
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
        name: BuildChildren
        nameWithType: BundleNode.BuildChildren
        qualifiedName: Bundles.BundleNode.BuildChildren
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)
  Bundles.BundleNode.AddField(System.String,System.String):
    name:
      CSharp:
      - id: Bundles.BundleNode.AddField(System.String,System.String)
        name: AddField
        nameWithType: BundleNode.AddField
        qualifiedName: Bundles.BundleNode.AddField
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.AddField(System.String,System.String)
        name: AddField
        nameWithType: BundleNode.AddField
        qualifiedName: Bundles.BundleNode.AddField
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.AddField(System.String,System.String)
  Bundles.BundleNode.GetChildNode(System.String):
    name:
      CSharp:
      - id: Bundles.BundleNode.GetChildNode(System.String)
        name: GetChildNode
        nameWithType: BundleNode.GetChildNode
        qualifiedName: Bundles.BundleNode.GetChildNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.GetChildNode(System.String)
        name: GetChildNode
        nameWithType: BundleNode.GetChildNode
        qualifiedName: Bundles.BundleNode.GetChildNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.GetChildNode(System.String)
  Bundles.BundleNode.Get(System.String):
    name:
      CSharp:
      - id: Bundles.BundleNode.Get(System.String)
        name: Get
        nameWithType: BundleNode.Get
        qualifiedName: Bundles.BundleNode.Get
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.Get(System.String)
        name: Get
        nameWithType: BundleNode.Get
        qualifiedName: Bundles.BundleNode.Get
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.Get(System.String)
  Bundles.BundleNode.Get``1(System.String):
    name:
      CSharp:
      - id: Bundles.BundleNode.Get``1(System.String)
        name: Get<T>
        nameWithType: BundleNode.Get<T>
        qualifiedName: Bundles.BundleNode.Get<T>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.Get``1(System.String)
        name: Get(Of T)
        nameWithType: BundleNode.Get(Of T)
        qualifiedName: Bundles.BundleNode.Get(Of T)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.Get``1(System.String)
  Bundles.Nodes.Bundle.SavePath*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.SavePath*
        name: SavePath
        nameWithType: Bundle.SavePath
        qualifiedName: Bundles.Nodes.Bundle.SavePath
      VB:
      - id: Bundles.Nodes.Bundle.SavePath*
        name: SavePath
        nameWithType: Bundle.SavePath
        qualifiedName: Bundles.Nodes.Bundle.SavePath
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.SavePath
  System.Xml.XmlWriterSettings:
    name:
      CSharp:
      - id: System.Xml.XmlWriterSettings
        name: XmlWriterSettings
        nameWithType: XmlWriterSettings
        qualifiedName: System.Xml.XmlWriterSettings
        isExternal: true
      VB:
      - id: System.Xml.XmlWriterSettings
        name: XmlWriterSettings
        nameWithType: XmlWriterSettings
        qualifiedName: System.Xml.XmlWriterSettings
        isExternal: true
    isDefinition: true
    parent: System.Xml
    commentId: T:System.Xml.XmlWriterSettings
  Bundles.Nodes.Bundle.XmlWriterSettings*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.XmlWriterSettings*
        name: XmlWriterSettings
        nameWithType: Bundle.XmlWriterSettings
        qualifiedName: Bundles.Nodes.Bundle.XmlWriterSettings
      VB:
      - id: Bundles.Nodes.Bundle.XmlWriterSettings*
        name: XmlWriterSettings
        nameWithType: Bundle.XmlWriterSettings
        qualifiedName: Bundles.Nodes.Bundle.XmlWriterSettings
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.XmlWriterSettings
  Bundles.BundleNode.Attach(Bundles.BundleNode):
    name:
      CSharp:
      - id: Bundles.BundleNode.Attach(Bundles.BundleNode)
        name: Attach
        nameWithType: BundleNode.Attach
        qualifiedName: Bundles.BundleNode.Attach
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.Attach(Bundles.BundleNode)
        name: Attach
        nameWithType: BundleNode.Attach
        qualifiedName: Bundles.BundleNode.Attach
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Bundles.BundleNode
        name: BundleNode
        nameWithType: BundleNode
        qualifiedName: Bundles.BundleNode
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.Attach(Bundles.BundleNode)
  Bundles.Nodes.Bundle.Attach*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.Attach*
        name: Attach
        nameWithType: Bundle.Attach
        qualifiedName: Bundles.Nodes.Bundle.Attach
      VB:
      - id: Bundles.Nodes.Bundle.Attach*
        name: Attach
        nameWithType: Bundle.Attach
        qualifiedName: Bundles.Nodes.Bundle.Attach
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.Attach
  Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter):
    name:
      CSharp:
      - id: Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
        name: WriteXmlAttributes
        nameWithType: BundleNode.WriteXmlAttributes
        qualifiedName: Bundles.BundleNode.WriteXmlAttributes
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
        name: WriteXmlAttributes
        nameWithType: BundleNode.WriteXmlAttributes
        qualifiedName: Bundles.BundleNode.WriteXmlAttributes
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlWriter
        name: XmlWriter
        nameWithType: XmlWriter
        qualifiedName: System.Xml.XmlWriter
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleNode
    commentId: M:Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)
  Bundles.Nodes.Bundle.WriteXmlAttributes*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.WriteXmlAttributes*
        name: WriteXmlAttributes
        nameWithType: Bundle.WriteXmlAttributes
        qualifiedName: Bundles.Nodes.Bundle.WriteXmlAttributes
      VB:
      - id: Bundles.Nodes.Bundle.WriteXmlAttributes*
        name: WriteXmlAttributes
        nameWithType: Bundle.WriteXmlAttributes
        qualifiedName: Bundles.Nodes.Bundle.WriteXmlAttributes
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.WriteXmlAttributes
  Bundles.Nodes.Bundle.SavePath:
    commentId: P:Bundles.Nodes.Bundle.SavePath
  System.Xml.Serialization.XmlSerializer:
    commentId: T:System.Xml.Serialization.XmlSerializer
  Bundles.Nodes.Bundle.Save*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.Save*
        name: Save
        nameWithType: Bundle.Save
        qualifiedName: Bundles.Nodes.Bundle.Save
      VB:
      - id: Bundles.Nodes.Bundle.Save*
        name: Save
        nameWithType: Bundle.Save
        qualifiedName: Bundles.Nodes.Bundle.Save
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.Save
  System.IO.Stream:
    name:
      CSharp:
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
      VB:
      - id: System.IO.Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: System.IO.Stream
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.Stream
  System.IO:
    name:
      CSharp:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
        isExternal: true
      VB:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
    isDefinition: true
    commentId: N:System.IO
  Bundles.Nodes.Bundle.SaveToStream*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.SaveToStream*
        name: SaveToStream
        nameWithType: Bundle.SaveToStream
        qualifiedName: Bundles.Nodes.Bundle.SaveToStream
      VB:
      - id: Bundles.Nodes.Bundle.SaveToStream*
        name: SaveToStream
        nameWithType: Bundle.SaveToStream
        qualifiedName: Bundles.Nodes.Bundle.SaveToStream
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.SaveToStream
  Bundles.Nodes.Bundle.Load*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.Load*
        name: Load
        nameWithType: Bundle.Load
        qualifiedName: Bundles.Nodes.Bundle.Load
      VB:
      - id: Bundles.Nodes.Bundle.Load*
        name: Load
        nameWithType: Bundle.Load
        qualifiedName: Bundles.Nodes.Bundle.Load
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.Load
  Bundles.Nodes.Bundle.LoadFromStream*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.LoadFromStream*
        name: LoadFromStream
        nameWithType: Bundle.LoadFromStream
        qualifiedName: Bundles.Nodes.Bundle.LoadFromStream
      VB:
      - id: Bundles.Nodes.Bundle.LoadFromStream*
        name: LoadFromStream
        nameWithType: Bundle.LoadFromStream
        qualifiedName: Bundles.Nodes.Bundle.LoadFromStream
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.LoadFromStream
  Bundles.Nodes.Bundle.TryLoad*:
    name:
      CSharp:
      - id: Bundles.Nodes.Bundle.TryLoad*
        name: TryLoad
        nameWithType: Bundle.TryLoad
        qualifiedName: Bundles.Nodes.Bundle.TryLoad
      VB:
      - id: Bundles.Nodes.Bundle.TryLoad*
        name: TryLoad
        nameWithType: Bundle.TryLoad
        qualifiedName: Bundles.Nodes.Bundle.TryLoad
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Bundle.TryLoad
  Bundles.BundleElementAttribute.#ctor(System.String):
    name:
      CSharp:
      - id: Bundles.BundleElementAttribute.#ctor(System.String)
        name: BundleElementAttribute
        nameWithType: BundleElementAttribute.BundleElementAttribute
        qualifiedName: Bundles.BundleElementAttribute.BundleElementAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.BundleElementAttribute.#ctor(System.String)
        name: BundleElementAttribute
        nameWithType: BundleElementAttribute.BundleElementAttribute
        qualifiedName: Bundles.BundleElementAttribute.BundleElementAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.BundleElementAttribute
    commentId: M:Bundles.BundleElementAttribute.#ctor(System.String)
  Bundles.Nodes.BundleData.#ctor*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleData.#ctor*
        name: BundleData
        nameWithType: BundleData.BundleData
        qualifiedName: Bundles.Nodes.BundleData.BundleData
      VB:
      - id: Bundles.Nodes.BundleData.#ctor*
        name: BundleData
        nameWithType: BundleData.BundleData
        qualifiedName: Bundles.Nodes.BundleData.BundleData
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleData.#ctor
  Bundles.Nodes.BundleData.NodePath*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleData.NodePath*
        name: NodePath
        nameWithType: BundleData.NodePath
        qualifiedName: Bundles.Nodes.BundleData.NodePath
      VB:
      - id: Bundles.Nodes.BundleData.NodePath*
        name: NodePath
        nameWithType: BundleData.NodePath
        qualifiedName: Bundles.Nodes.BundleData.NodePath
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleData.NodePath
  Bundles.Nodes.BundleData.BuildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleData.BuildNode*
        name: BuildNode
        nameWithType: BundleData.BuildNode
        qualifiedName: Bundles.Nodes.BundleData.BuildNode
      VB:
      - id: Bundles.Nodes.BundleData.BuildNode*
        name: BuildNode
        nameWithType: BundleData.BuildNode
        qualifiedName: Bundles.Nodes.BundleData.BuildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleData.BuildNode
  Bundles.Nodes.BundleData:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleData
        name: BundleData
        nameWithType: BundleData
        qualifiedName: Bundles.Nodes.BundleData
      VB:
      - id: Bundles.Nodes.BundleData
        name: BundleData
        nameWithType: BundleData
        qualifiedName: Bundles.Nodes.BundleData
    isDefinition: true
    commentId: T:Bundles.Nodes.BundleData
  Bundles.Nodes.FieldNode.SkipWrite*:
    name:
      CSharp:
      - id: Bundles.Nodes.FieldNode.SkipWrite*
        name: SkipWrite
        nameWithType: FieldNode.SkipWrite
        qualifiedName: Bundles.Nodes.FieldNode.SkipWrite
      VB:
      - id: Bundles.Nodes.FieldNode.SkipWrite*
        name: SkipWrite
        nameWithType: FieldNode.SkipWrite
        qualifiedName: Bundles.Nodes.FieldNode.SkipWrite
    isDefinition: true
    commentId: Overload:Bundles.Nodes.FieldNode.SkipWrite
  Bundles.Nodes.FieldNode.WriteXmlAttributes*:
    name:
      CSharp:
      - id: Bundles.Nodes.FieldNode.WriteXmlAttributes*
        name: WriteXmlAttributes
        nameWithType: FieldNode.WriteXmlAttributes
        qualifiedName: Bundles.Nodes.FieldNode.WriteXmlAttributes
      VB:
      - id: Bundles.Nodes.FieldNode.WriteXmlAttributes*
        name: WriteXmlAttributes
        nameWithType: FieldNode.WriteXmlAttributes
        qualifiedName: Bundles.Nodes.FieldNode.WriteXmlAttributes
    isDefinition: true
    commentId: Overload:Bundles.Nodes.FieldNode.WriteXmlAttributes
  Bundles.Nodes.FieldNode.WriteXmlContent*:
    name:
      CSharp:
      - id: Bundles.Nodes.FieldNode.WriteXmlContent*
        name: WriteXmlContent
        nameWithType: FieldNode.WriteXmlContent
        qualifiedName: Bundles.Nodes.FieldNode.WriteXmlContent
      VB:
      - id: Bundles.Nodes.FieldNode.WriteXmlContent*
        name: WriteXmlContent
        nameWithType: FieldNode.WriteXmlContent
        qualifiedName: Bundles.Nodes.FieldNode.WriteXmlContent
    isDefinition: true
    commentId: Overload:Bundles.Nodes.FieldNode.WriteXmlContent
  Bundles.Nodes.Folder.BuildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.Folder.BuildNode*
        name: BuildNode
        nameWithType: Folder.BuildNode
        qualifiedName: Bundles.Nodes.Folder.BuildNode
      VB:
      - id: Bundles.Nodes.Folder.BuildNode*
        name: BuildNode
        nameWithType: Folder.BuildNode
        qualifiedName: Bundles.Nodes.Folder.BuildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.Folder.BuildNode
  Bundles.Nodes.Folder:
    name:
      CSharp:
      - id: Bundles.Nodes.Folder
        name: Folder
        nameWithType: Folder
        qualifiedName: Bundles.Nodes.Folder
      VB:
      - id: Bundles.Nodes.Folder
        name: Folder
        nameWithType: Folder
        qualifiedName: Bundles.Nodes.Folder
    isDefinition: true
    commentId: T:Bundles.Nodes.Folder
  Bundles.Nodes.FolderList.BuildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.FolderList.BuildNode*
        name: BuildNode
        nameWithType: FolderList.BuildNode
        qualifiedName: Bundles.Nodes.FolderList.BuildNode
      VB:
      - id: Bundles.Nodes.FolderList.BuildNode*
        name: BuildNode
        nameWithType: FolderList.BuildNode
        qualifiedName: Bundles.Nodes.FolderList.BuildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.FolderList.BuildNode
  Bundles.Nodes.FolderList.BuildChildren*:
    name:
      CSharp:
      - id: Bundles.Nodes.FolderList.BuildChildren*
        name: BuildChildren
        nameWithType: FolderList.BuildChildren
        qualifiedName: Bundles.Nodes.FolderList.BuildChildren
      VB:
      - id: Bundles.Nodes.FolderList.BuildChildren*
        name: BuildChildren
        nameWithType: FolderList.BuildChildren
        qualifiedName: Bundles.Nodes.FolderList.BuildChildren
    isDefinition: true
    commentId: Overload:Bundles.Nodes.FolderList.BuildChildren
  Bundles.Nodes.FolderList.GetChildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.FolderList.GetChildNode*
        name: GetChildNode
        nameWithType: FolderList.GetChildNode
        qualifiedName: Bundles.Nodes.FolderList.GetChildNode
      VB:
      - id: Bundles.Nodes.FolderList.GetChildNode*
        name: GetChildNode
        nameWithType: FolderList.GetChildNode
        qualifiedName: Bundles.Nodes.FolderList.GetChildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.FolderList.GetChildNode
  Bundles.Nodes.FolderList:
    name:
      CSharp:
      - id: Bundles.Nodes.FolderList
        name: FolderList
        nameWithType: FolderList
        qualifiedName: Bundles.Nodes.FolderList
      VB:
      - id: Bundles.Nodes.FolderList
        name: FolderList
        nameWithType: FolderList
        qualifiedName: Bundles.Nodes.FolderList
    isDefinition: true
    commentId: T:Bundles.Nodes.FolderList
  Bundles.Nodes.NodeList:
    name:
      CSharp:
      - id: Bundles.Nodes.NodeList
        name: NodeList
        nameWithType: NodeList
        qualifiedName: Bundles.Nodes.NodeList
      VB:
      - id: Bundles.Nodes.NodeList
        name: NodeList
        nameWithType: NodeList
        qualifiedName: Bundles.Nodes.NodeList
    isDefinition: true
    commentId: T:Bundles.Nodes.NodeList
  Bundles.Nodes.ListItem:
    name:
      CSharp:
      - id: Bundles.Nodes.ListItem
        name: ListItem
        nameWithType: ListItem
        qualifiedName: Bundles.Nodes.ListItem
      VB:
      - id: Bundles.Nodes.ListItem
        name: ListItem
        nameWithType: ListItem
        qualifiedName: Bundles.Nodes.ListItem
    isDefinition: true
    commentId: T:Bundles.Nodes.ListItem
  Bundles.Nodes.NodeList.SkipWrite*:
    name:
      CSharp:
      - id: Bundles.Nodes.NodeList.SkipWrite*
        name: SkipWrite
        nameWithType: NodeList.SkipWrite
        qualifiedName: Bundles.Nodes.NodeList.SkipWrite
      VB:
      - id: Bundles.Nodes.NodeList.SkipWrite*
        name: SkipWrite
        nameWithType: NodeList.SkipWrite
        qualifiedName: Bundles.Nodes.NodeList.SkipWrite
    isDefinition: true
    commentId: Overload:Bundles.Nodes.NodeList.SkipWrite
  Bundles.Nodes.NodeList.BuildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.NodeList.BuildNode*
        name: BuildNode
        nameWithType: NodeList.BuildNode
        qualifiedName: Bundles.Nodes.NodeList.BuildNode
      VB:
      - id: Bundles.Nodes.NodeList.BuildNode*
        name: BuildNode
        nameWithType: NodeList.BuildNode
        qualifiedName: Bundles.Nodes.NodeList.BuildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.NodeList.BuildNode
  Bundles.Nodes.NodeList.BuildChildren*:
    name:
      CSharp:
      - id: Bundles.Nodes.NodeList.BuildChildren*
        name: BuildChildren
        nameWithType: NodeList.BuildChildren
        qualifiedName: Bundles.Nodes.NodeList.BuildChildren
      VB:
      - id: Bundles.Nodes.NodeList.BuildChildren*
        name: BuildChildren
        nameWithType: NodeList.BuildChildren
        qualifiedName: Bundles.Nodes.NodeList.BuildChildren
    isDefinition: true
    commentId: Overload:Bundles.Nodes.NodeList.BuildChildren
  Bundles.Nodes.NodeList.GetChildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.NodeList.GetChildNode*
        name: GetChildNode
        nameWithType: NodeList.GetChildNode
        qualifiedName: Bundles.Nodes.NodeList.GetChildNode
      VB:
      - id: Bundles.Nodes.NodeList.GetChildNode*
        name: GetChildNode
        nameWithType: NodeList.GetChildNode
        qualifiedName: Bundles.Nodes.NodeList.GetChildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.NodeList.GetChildNode
  Bundles.Nodes.BundleConfig.#ctor*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleConfig.#ctor*
        name: BundleConfig
        nameWithType: BundleConfig.BundleConfig
        qualifiedName: Bundles.Nodes.BundleConfig.BundleConfig
      VB:
      - id: Bundles.Nodes.BundleConfig.#ctor*
        name: BundleConfig
        nameWithType: BundleConfig.BundleConfig
        qualifiedName: Bundles.Nodes.BundleConfig.BundleConfig
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleConfig.#ctor
  Bundles.Nodes.BundleConfig.NodePath*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleConfig.NodePath*
        name: NodePath
        nameWithType: BundleConfig.NodePath
        qualifiedName: Bundles.Nodes.BundleConfig.NodePath
      VB:
      - id: Bundles.Nodes.BundleConfig.NodePath*
        name: NodePath
        nameWithType: BundleConfig.NodePath
        qualifiedName: Bundles.Nodes.BundleConfig.NodePath
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleConfig.NodePath
  Bundles.Nodes.BundleConfig.BuildAttributes*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleConfig.BuildAttributes*
        name: BuildAttributes
        nameWithType: BundleConfig.BuildAttributes
        qualifiedName: Bundles.Nodes.BundleConfig.BuildAttributes
      VB:
      - id: Bundles.Nodes.BundleConfig.BuildAttributes*
        name: BuildAttributes
        nameWithType: BundleConfig.BuildAttributes
        qualifiedName: Bundles.Nodes.BundleConfig.BuildAttributes
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleConfig.BuildAttributes
  Bundles.Nodes.BundleConfig.BuildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleConfig.BuildNode*
        name: BuildNode
        nameWithType: BundleConfig.BuildNode
        qualifiedName: Bundles.Nodes.BundleConfig.BuildNode
      VB:
      - id: Bundles.Nodes.BundleConfig.BuildNode*
        name: BuildNode
        nameWithType: BundleConfig.BuildNode
        qualifiedName: Bundles.Nodes.BundleConfig.BuildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleConfig.BuildNode
  Bundles.Nodes.BundleConfig.BuildChildren*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleConfig.BuildChildren*
        name: BuildChildren
        nameWithType: BundleConfig.BuildChildren
        qualifiedName: Bundles.Nodes.BundleConfig.BuildChildren
      VB:
      - id: Bundles.Nodes.BundleConfig.BuildChildren*
        name: BuildChildren
        nameWithType: BundleConfig.BuildChildren
        qualifiedName: Bundles.Nodes.BundleConfig.BuildChildren
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleConfig.BuildChildren
  Bundles.Nodes.BundleConfig:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleConfig
        name: BundleConfig
        nameWithType: BundleConfig
        qualifiedName: Bundles.Nodes.BundleConfig
      VB:
      - id: Bundles.Nodes.BundleConfig
        name: BundleConfig
        nameWithType: BundleConfig
        qualifiedName: Bundles.Nodes.BundleConfig
    isDefinition: true
    commentId: T:Bundles.Nodes.BundleConfig
  Bundles.Nodes.BundleOption:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleOption
        name: BundleOption
        nameWithType: BundleOption
        qualifiedName: Bundles.Nodes.BundleOption
      VB:
      - id: Bundles.Nodes.BundleOption
        name: BundleOption
        nameWithType: BundleOption
        qualifiedName: Bundles.Nodes.BundleOption
    isDefinition: true
    parent: Bundles.Nodes
    commentId: T:Bundles.Nodes.BundleOption
  Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode):
    name:
      CSharp:
      - id: Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
        name: BuildNode
        nameWithType: BundleOption.BuildNode
        qualifiedName: Bundles.Nodes.BundleOption.BuildNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
        name: BuildNode
        nameWithType: BundleOption.BuildNode
        qualifiedName: Bundles.Nodes.BundleOption.BuildNode
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Xml.XmlNode
        name: XmlNode
        nameWithType: XmlNode
        qualifiedName: System.Xml.XmlNode
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.Nodes.BundleOption
    commentId: M:Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)
  Bundles.Nodes.BundleExtension.Value*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleExtension.Value*
        name: Value
        nameWithType: BundleExtension.Value
        qualifiedName: Bundles.Nodes.BundleExtension.Value
      VB:
      - id: Bundles.Nodes.BundleExtension.Value*
        name: Value
        nameWithType: BundleExtension.Value
        qualifiedName: Bundles.Nodes.BundleExtension.Value
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleExtension.Value
  Bundles.Nodes.BundleExtension.BuildAttributes*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleExtension.BuildAttributes*
        name: BuildAttributes
        nameWithType: BundleExtension.BuildAttributes
        qualifiedName: Bundles.Nodes.BundleExtension.BuildAttributes
      VB:
      - id: Bundles.Nodes.BundleExtension.BuildAttributes*
        name: BuildAttributes
        nameWithType: BundleExtension.BuildAttributes
        qualifiedName: Bundles.Nodes.BundleExtension.BuildAttributes
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleExtension.BuildAttributes
  Bundles.Nodes.BundleExtension:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleExtension
        name: BundleExtension
        nameWithType: BundleExtension
        qualifiedName: Bundles.Nodes.BundleExtension
      VB:
      - id: Bundles.Nodes.BundleExtension
        name: BundleExtension
        nameWithType: BundleExtension
        qualifiedName: Bundles.Nodes.BundleExtension
    isDefinition: true
    commentId: T:Bundles.Nodes.BundleExtension
  Bundles.DefaultOptionAttribute.#ctor(System.String,System.String):
    name:
      CSharp:
      - id: Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)
        name: DefaultOptionAttribute
        nameWithType: DefaultOptionAttribute.DefaultOptionAttribute
        qualifiedName: Bundles.DefaultOptionAttribute.DefaultOptionAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)
        name: DefaultOptionAttribute
        nameWithType: DefaultOptionAttribute.DefaultOptionAttribute
        qualifiedName: Bundles.DefaultOptionAttribute.DefaultOptionAttribute
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: Bundles.DefaultOptionAttribute
    commentId: M:Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)
  Bundles.Nodes.BundleOption.BuildNode*:
    name:
      CSharp:
      - id: Bundles.Nodes.BundleOption.BuildNode*
        name: BuildNode
        nameWithType: BundleOption.BuildNode
        qualifiedName: Bundles.Nodes.BundleOption.BuildNode
      VB:
      - id: Bundles.Nodes.BundleOption.BuildNode*
        name: BuildNode
        nameWithType: BundleOption.BuildNode
        qualifiedName: Bundles.Nodes.BundleOption.BuildNode
    isDefinition: true
    commentId: Overload:Bundles.Nodes.BundleOption.BuildNode
  Bundles.Nodes.GenerateEmptyFolders.BuildAttributes*:
    name:
      CSharp:
      - id: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes*
        name: BuildAttributes
        nameWithType: GenerateEmptyFolders.BuildAttributes
        qualifiedName: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes
      VB:
      - id: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes*
        name: BuildAttributes
        nameWithType: GenerateEmptyFolders.BuildAttributes
        qualifiedName: Bundles.Nodes.GenerateEmptyFolders.BuildAttributes
    isDefinition: true
    commentId: Overload:Bundles.Nodes.GenerateEmptyFolders.BuildAttributes
  Bundles.Nodes.GenerateEmptyFolders:
    name:
      CSharp:
      - id: Bundles.Nodes.GenerateEmptyFolders
        name: GenerateEmptyFolders
        nameWithType: GenerateEmptyFolders
        qualifiedName: Bundles.Nodes.GenerateEmptyFolders
      VB:
      - id: Bundles.Nodes.GenerateEmptyFolders
        name: GenerateEmptyFolders
        nameWithType: GenerateEmptyFolders
        qualifiedName: Bundles.Nodes.GenerateEmptyFolders
    isDefinition: true
    commentId: T:Bundles.Nodes.GenerateEmptyFolders
