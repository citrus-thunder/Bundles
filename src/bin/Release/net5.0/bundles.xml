<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bundles</name>
    </assembly>
    <members>
        <member name="T:Bundles.BundleElementAttribute">
            <summary>
            Describes the XML Element Name that will be associated with this type
            </summary>
        </member>
        <member name="M:Bundles.BundleElementAttribute.#ctor(System.String)">
            <summary>
            Create a new BundleElementAttribute, associating this type
            with the given XML Element Name
            </summary>
            <param name="elementName"></param>
        </member>
        <member name="P:Bundles.BundleElementAttribute.ElementName">
            <summary>
            XML Element Name that this type is associated with
            </summary>
            <value></value>
        </member>
        <member name="T:Bundles.DefaultOptionAttribute">
            <summary>
            Declares this type a default BundleOption and defines its default value
            </summary>
        </member>
        <member name="M:Bundles.DefaultOptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Create a new DefaultOptionAttribute
            </summary>
            <param name="optionName"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="P:Bundles.DefaultOptionAttribute.Name">
            <summary>
            Name of the option
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.DefaultOptionAttribute.DefaultValue">
            <summary>
            The option's default value
            </summary>
            <value></value>
        </member>
        <member name="T:Bundles.FieldNameAttribute">
            <summary>
            Overrides the BundleField's name
            </summary>
        </member>
        <member name="M:Bundles.FieldNameAttribute.#ctor(System.String)">
            <summary>
            Create a new FieldNameAttribute
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Bundles.FieldNameAttribute.Name">
            <summary>
            This BundleField's overridden name
            </summary>
            <value></value>
        </member>
        <member name="T:Bundles.BundleField">
            <summary>
            Represents an automatically-generated <see cref="T:Bundles.Nodes.FieldNode"/>
            </summary>
        </member>
        <member name="M:Bundles.BundleField.#ctor(Bundles.BundleNode,System.String)">
            <summary>
            Create a new BundleField
            </summary>
            <param name="node"></param>
            <param name="name"></param>
        </member>
        <member name="P:Bundles.BundleField.Node">
            <summary>
            This field's parent Node
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleField.Name">
            <summary>
            This field's Name, as it appears in the parent node's NodePath
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleField.Value">
            <summary>
            This field's value
            </summary>
            <value></value>
        </member>
        <member name="T:Bundles.Bundler">
            <summary>
            Root bundle element. Handles loading BundleDef definition files, <see cref="T:Bundles.BundleNode"/> access, and filesystem path resolution.
            </summary>
        </member>
        <member name="M:Bundles.Bundler.#ctor(System.Xml.XmlDocument)">
            <summary>
            Creates a new Bundler using a definition file contained in a given XmlDocument
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Bundles.Bundler.#ctor(System.String)">
            <summary>
            Creates a new Bundler using a definition file at the provided path
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:Bundles.Bundler.AppRoot">
            <summary>
            The application root folder's absolute path in the filesystem
            </summary>
            <remarks>
            Default value is <see cref="F:System.Environment.SpecialFolder.ApplicationData"/>
            </remarks>
        </member>
        <member name="P:Bundles.Bundler.DataRootFolder">
            <summary>
            Name of this application's root folder located immediately beneath <see cref="P:Bundles.Bundler.AppRoot"/>
            </summary>
            <remarks>
            To get the absolute filesystem path to this folder, use <see cref="P:Bundles.Bundler.DataRoot"/>
            </remarks>
        </member>
        <member name="P:Bundles.Bundler.BundleFileExtension">
            <summary>
            File extension used by this Bundler's <see cref="T:Bundles.Nodes.Bundle"/>s
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.Bundler.DataRoot">
            <summary>
            Absolute filesystem path to this Bundler's data root.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.Bundler.Data">
            <summary>
            This Bundler's root data node
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.Bundler.Config">
            <summary>
            This Bundler's root configuration node
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.Bundler.Options">
            <summary>
            <see cref="T:Bundles.BundleValues"/> view of this Bundler's options
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.Bundler.Services">
            <summary>
            This Bundler's service container
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bundles.Bundler.Build(System.Xml.XmlNode)">
            <summary>
            Builds the Bundler's root elements
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Bundles.BundleServiceContainer">
            <summary>
            Service container used by a <see cref="T:Bundles.Bundler"/> and its child nodes
            </summary>
        </member>
        <member name="M:Bundles.BundleServiceContainer.AddService(System.Object)">
            <summary>
            Adds a service to the container
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Bundles.BundleServiceContainer.AddService``1">
            <summary>
            Adds a service to the container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bundles.BundleServiceContainer.GetService(System.Type)">
            <summary>
            Retrieves a service from the container
            </summary>
            <param name="type"></param>
            <returns>Service of provided type if present; otherwise <c>null</c></returns>
        </member>
        <member name="M:Bundles.BundleServiceContainer.GetService``1">
            <summary>
            Retrieves a service from the container
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Service of provided type if present; otherwise <c>null</c></returns>
        </member>
        <member name="M:Bundles.BundleServiceContainer.RemoveService``1">
            <summary>
            Removes service of given type from the container
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Bundles.BundleValues">
            <summary>
            Represents a two-way view of a <see cref="T:Bundles.BundleNode"/>'s
            child <see cref="T:Bundles.Nodes.FieldNode"/>s' values.
            </summary>
        </member>
        <member name="M:Bundles.BundleValues.#ctor(Bundles.BundleNode)">
            <summary>
            Creates a new BundleValues view
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Bundles.BundleValues.Node">
            <summary>
            The <see cref="T:Bundles.BundleNode"/> this view is for.
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleValues.All">
            <summary>
            A key-value list of all values in the view
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.BundleValues.Item(System.String)">
            <summary>
            Accesses a field's value within this view by the field's name.
            </summary>
            <value></value>
        </member>
        <member name="M:Bundles.BundleValues.GetAll(System.Boolean)">
            <summary>
            Retrieves a read-only key/value list of all values in the view.
            </summary>
            <param name="includeEmpty"></param>
            <returns></returns>
        </member>
        <member name="T:Bundles.Extensions">
            <summary>
            Extension Methods for Bundles classes and interfaces
            </summary>
        </member>
        <member name="M:Bundles.Extensions.ToPath(System.String)">
            <summary>
            Converts a NodePath-syntax string to a local-system-compatible path.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Bundles.BundleNode">
            <summary>
            Represents a node within the filesystem layout described by a <see cref="P:Bundles.BundleNode.Bundler"/>'s
            definition file.
            </summary>
        </member>
        <member name="F:Bundles.BundleNode.NodeTypes">
            <summary>
            Contains BundleValue types and XML element names with which they are associated.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.BundleNode.Item(System.String)">
            <summary>
            Retrieves a descendant of this node via relative NodePath.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.BundleNode.ElementName">
            <summary>
            This BundleNode type's XML element name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.BundleNode.Name">
            <summary>
            This node's Name as it appears in the NodePath.
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleNode.Value">
            <summary>
            This node's stored Value.
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleNode.Values">
            <summary>
            <see cref="T:Bundles.BundleValues"/> view of this node's child <see cref="T:Bundles.Nodes.FieldNode"/>s.
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleNode.NodePath">
            <summary>
            Describes this node's position in the <see cref="P:Bundles.BundleNode.Bundler"/>'s node tree.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.BundleNode.SkipWrite">
            <summary>
            If true, this node will skip writing its contents to XML upon serialization.
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleNode.Attributes">
            <summary>
            This node's attributes as imported from XML, defined in the Bundler's definition file,
            or explicitly set after the node's initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.BundleNode.Nodes">
            <summary>
            This node's descendant nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.BundleNode.Parent">
            <summary>
            This node's parent node.
            </summary>
            <value></value>
        </member>
        <member name="P:Bundles.BundleNode.Bundler">
            <summary>
            The <see cref="P:Bundles.BundleNode.Bundler"/> which owns the node tree that contains this node.
            </summary>
            <value></value>
        </member>
        <member name="M:Bundles.BundleNode.ReadXmlAttributes(System.Xml.XmlNode)">
            <summary>
            Import attributes deserialized from XML
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Bundles.BundleNode.ReadXmlContent(System.Xml.XmlNode)">
            <summary>
            Import content deserialized from XML.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Bundles.BundleNode.WriteXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Write this node's attributes to XML.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Bundles.BundleNode.WriteXmlContent(System.Xml.XmlWriter)">
            <summary>
            Write this node's contents to XML.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Bundles.BundleNode.Attach(Bundles.BundleNode)">
            <summary>
            Called when this node is attached to a parent node.
            </summary>
            <param name="parentNode"></param>
        </member>
        <member name="M:Bundles.BundleNode.AddChild(Bundles.BundleNode)">
            <summary>
            Called when a child node is added to this node.
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="M:Bundles.BundleNode.AddNode(System.Xml.XmlNode)">
            <summary>
            Adds a node as a child to this node, as described in a given
            XmlNode
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Bundles.BundleNode.AddNode(Bundles.BundleNode)">
            <summary>
            Adds the given node as a child to this node.
            </summary>
            <param name="newNode"></param>
        </member>
        <member name="M:Bundles.BundleNode.Merge(Bundles.BundleNode)">
            <summary>
            Merges the given node's attributes and content into this node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Bundles.BundleNode.Build(System.Xml.XmlNode)">
            <summary>
            Builds node's attributes and content from a given XmlNode
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Bundles.BundleNode.BuildAttributes(System.Xml.XmlNode)">
            <summary>
            Builds the node's attributes as described in the given XmlNode
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Bundles.BundleNode.BuildNode(System.Xml.XmlNode)">
            <summary>
            Called when this node is being built
            </summary>
            <param name="node"></param>
            <remarks>
            Called after this node's properties and attributes are defined, but
            before its children are built.
            </remarks>
        </member>
        <member name="M:Bundles.BundleNode.BuildChildren(System.Xml.XmlNode)">
            <summary>
            Builds this node's child nodes as described in the given XmlNode.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Bundles.BundleNode.AddField(System.String,System.String)">
            <summary>
            Adds a <see cref="T:Bundles.Nodes.FieldNode"/> as a child to this node.
            </summary>
            <param name="name">The new field's name</param>
            <param name="value">The new field's value</param>
            <returns></returns>
        </member>
        <member name="M:Bundles.BundleNode.GetChildNode(System.String)">
            <summary>
            Retrieves one of this node's child nodes.
            </summary>
            <param name="nodeName">Name of the child node</param>
            <returns></returns>
        </member>
        <member name="M:Bundles.BundleNode.Get(System.String)">
            <summary>
            Retrieves one of this node's descendants using NodePath syntax.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Bundles.BundleNode.Get``1(System.String)">
            <summary>
            Retrieves one of this node's descendants using NodePath syntax.
            </summary>
            <param name="path"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Bundles.Nodes.Bundle">
            <summary>
            A Bundle represents a complete data entity that can be loaded and saved to a
            predetermined location on the filesystem or to/from a given stream
            </summary>
        </member>
        <member name="P:Bundles.Nodes.Bundle.SavePath">
            <summary>
            Location in the filesystem to which this bundle will save and attempt to load from
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bundles.Nodes.Bundle.XmlWriterSettings">
            <summary>
            XmlSettings reference used by the Bundle's default XmlSerializer
            </summary>
            <value></value>
        </member>
        <member name="M:Bundles.Nodes.Bundle.Attach(Bundles.BundleNode)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.Bundle.WriteXmlAttributes(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.Bundle.Save">
            <summary>
            Save the Bundle to the location specified by <see cref="P:Bundles.Nodes.Bundle.SavePath"/>
            using the Bundle's default <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            </summary>
        </member>
        <member name="M:Bundles.Nodes.Bundle.SaveToStream(System.IO.Stream)">
            <summary>
            Save the Bundle to the provided <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Bundles.Nodes.Bundle.Load">
            <summary>
            Load the Bundle's information from a local file specified by <see cref="P:Bundles.Nodes.Bundle.SavePath"/>
            using the Bundle's default <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            </summary>
        </member>
        <member name="M:Bundles.Nodes.Bundle.LoadFromStream(System.IO.Stream)">
            <summary>
            Load the Bundle's information from the given <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Bundles.Nodes.Bundle.TryLoad">
            <summary>
            Attempt to load the Bundle's information from a local file specified by <see cref="P:Bundles.Nodes.Bundle.SavePath"/>
            using the Bundle's default <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            </summary>
            <returns><c>true</c> if success, <c>false</c> if failure</returns>
        </member>
        <member name="T:Bundles.Nodes.BundleData">
            <summary>
            Represents a <see cref="T:Bundles.Bundler"/>'s root data node
            </summary>
        </member>
        <member name="M:Bundles.Nodes.BundleData.#ctor(Bundles.Bundler)">
            <summary>
            Creates a new BundleData node associated with the given <see cref="T:Bundles.Bundler"/>
            </summary>
            <param name="bundler"></param>
        </member>
        <member name="P:Bundles.Nodes.BundleData.NodePath">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.BundleData.BuildNode(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.FieldNode">
            <summary>
            Represents a single data value assocated with the parent node
            </summary>
        </member>
        <member name="P:Bundles.Nodes.FieldNode.SkipWrite">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.FieldNode.WriteXmlAttributes(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.FieldNode.WriteXmlContent(System.Xml.XmlWriter)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.Folder">
            <summary>
            Represents a folder in the filesystem
            </summary>
        </member>
        <member name="M:Bundles.Nodes.Folder.BuildNode(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.FolderList">
            <summary>
            Represents an abstract collection of folders with homogenous contents
            </summary>
        </member>
        <member name="M:Bundles.Nodes.FolderList.BuildNode(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.FolderList.BuildChildren(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.FolderList.GetChildNode(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.ListItem">
            <summary>
            Represents a generic item contained in a <see cref="T:Bundles.Nodes.NodeList"/> node
            </summary>
        </member>
        <member name="T:Bundles.Nodes.NodeList">
            <summary>
            Represents an abstract collection of nodes with homogenous contents
            </summary>
        </member>
        <member name="P:Bundles.Nodes.NodeList.SkipWrite">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.NodeList.BuildNode(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.NodeList.BuildChildren(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.NodeList.GetChildNode(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.BundleConfig">
            <summary>
            Represents a <see cref="T:Bundles.Bundler"/>'s root options node
            </summary>
        </member>
        <member name="M:Bundles.Nodes.BundleConfig.#ctor(Bundles.Bundler)">
            <summary>
            Creates a new BundleConfig
            </summary>
            <param name="bundler"></param>
        </member>
        <member name="P:Bundles.Nodes.BundleConfig.NodePath">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.BundleConfig.BuildAttributes(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.BundleConfig.BuildNode(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.BundleConfig.BuildChildren(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.BundleExtension">
            <summary>
            Option defining the file extension used for <see cref="T:Bundles.Nodes.Bundle"/>s
            </summary>
        </member>
        <member name="P:Bundles.Nodes.BundleExtension.Value">
            <inheritdoc />
        </member>
        <member name="M:Bundles.Nodes.BundleExtension.BuildAttributes(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.BundleOption">
            <summary>
            Represents an optional parameter used by a <see cref="T:Bundles.Bundler"/>
            </summary>
        </member>
        <member name="M:Bundles.Nodes.BundleOption.BuildNode(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
        <member name="T:Bundles.Nodes.GenerateEmptyFolders">
            <summary>
            Option defining whether <see cref="T:Bundles.Nodes.Folder"/>s automatically create
            their filesystem entities when instantiated
            </summary>
        </member>
        <member name="M:Bundles.Nodes.GenerateEmptyFolders.BuildAttributes(System.Xml.XmlNode)">
            <inheritdoc />
        </member>
    </members>
</doc>
